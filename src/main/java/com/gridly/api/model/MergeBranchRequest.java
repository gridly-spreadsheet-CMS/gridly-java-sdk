/*
 * Gridly API
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 5.9.0
 * Contact: support@gridly.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.gridly.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.gridly.api.model.FilterField;
import com.gridly.api.model.MergeRecordConflict;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.gridly.api.client.JSON;

/**
 * MergeBranchRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class MergeBranchRequest implements Serializable {
  private static final long serialVersionUID = 1L;

  /**
   * Gets or Sets mergeRecordOptions
   */
  @JsonAdapter(MergeRecordOptionsEnum.Adapter.class)
  public enum MergeRecordOptionsEnum {
    ADD("add"),
    
    UPDATE("update"),
    
    DELETE("delete"),
    
    OVERRIDE("override");

    private String value;

    MergeRecordOptionsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MergeRecordOptionsEnum fromValue(String value) {
      for (MergeRecordOptionsEnum b : MergeRecordOptionsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MergeRecordOptionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MergeRecordOptionsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MergeRecordOptionsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MergeRecordOptionsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_MERGE_RECORD_OPTIONS = "mergeRecordOptions";
  @SerializedName(SERIALIZED_NAME_MERGE_RECORD_OPTIONS)
  private List<MergeRecordOptionsEnum> mergeRecordOptions = null;

  public static final String SERIALIZED_NAME_MERGE_RECORD_CONFLICTS = "mergeRecordConflicts";
  @SerializedName(SERIALIZED_NAME_MERGE_RECORD_CONFLICTS)
  private List<MergeRecordConflict> mergeRecordConflicts = null;

  public static final String SERIALIZED_NAME_USE_LAST_MERGE_RESOLVE = "useLastMergeResolve";
  @SerializedName(SERIALIZED_NAME_USE_LAST_MERGE_RESOLVE)
  private Boolean useLastMergeResolve;

  public static final String SERIALIZED_NAME_CHECK_MISMATCHED_COLUMN_TYPE = "checkMismatchedColumnType";
  @SerializedName(SERIALIZED_NAME_CHECK_MISMATCHED_COLUMN_TYPE)
  private Boolean checkMismatchedColumnType;

  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  private List<FilterField> query = null;

  public MergeBranchRequest() {
  }

  public MergeBranchRequest mergeRecordOptions(List<MergeRecordOptionsEnum> mergeRecordOptions) {
    
    this.mergeRecordOptions = mergeRecordOptions;
    return this;
  }

  public MergeBranchRequest addMergeRecordOptionsItem(MergeRecordOptionsEnum mergeRecordOptionsItem) {
    if (this.mergeRecordOptions == null) {
      this.mergeRecordOptions = new ArrayList<>();
    }
    this.mergeRecordOptions.add(mergeRecordOptionsItem);
    return this;
  }

   /**
   * Get mergeRecordOptions
   * @return mergeRecordOptions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<MergeRecordOptionsEnum> getMergeRecordOptions() {
    return mergeRecordOptions;
  }


  public void setMergeRecordOptions(List<MergeRecordOptionsEnum> mergeRecordOptions) {
    this.mergeRecordOptions = mergeRecordOptions;
  }


  public MergeBranchRequest mergeRecordConflicts(List<MergeRecordConflict> mergeRecordConflicts) {
    
    this.mergeRecordConflicts = mergeRecordConflicts;
    return this;
  }

  public MergeBranchRequest addMergeRecordConflictsItem(MergeRecordConflict mergeRecordConflictsItem) {
    if (this.mergeRecordConflicts == null) {
      this.mergeRecordConflicts = new ArrayList<>();
    }
    this.mergeRecordConflicts.add(mergeRecordConflictsItem);
    return this;
  }

   /**
   * Get mergeRecordConflicts
   * @return mergeRecordConflicts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<MergeRecordConflict> getMergeRecordConflicts() {
    return mergeRecordConflicts;
  }


  public void setMergeRecordConflicts(List<MergeRecordConflict> mergeRecordConflicts) {
    this.mergeRecordConflicts = mergeRecordConflicts;
  }


  public MergeBranchRequest useLastMergeResolve(Boolean useLastMergeResolve) {
    
    this.useLastMergeResolve = useLastMergeResolve;
    return this;
  }

   /**
   * Get useLastMergeResolve
   * @return useLastMergeResolve
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean isUseLastMergeResolve() {
    return useLastMergeResolve;
  }


  public void setUseLastMergeResolve(Boolean useLastMergeResolve) {
    this.useLastMergeResolve = useLastMergeResolve;
  }


  public MergeBranchRequest checkMismatchedColumnType(Boolean checkMismatchedColumnType) {
    
    this.checkMismatchedColumnType = checkMismatchedColumnType;
    return this;
  }

   /**
   * Get checkMismatchedColumnType
   * @return checkMismatchedColumnType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean isCheckMismatchedColumnType() {
    return checkMismatchedColumnType;
  }


  public void setCheckMismatchedColumnType(Boolean checkMismatchedColumnType) {
    this.checkMismatchedColumnType = checkMismatchedColumnType;
  }


  public MergeBranchRequest query(List<FilterField> query) {
    
    this.query = query;
    return this;
  }

  public MergeBranchRequest addQueryItem(FilterField queryItem) {
    if (this.query == null) {
      this.query = new ArrayList<>();
    }
    this.query.add(queryItem);
    return this;
  }

   /**
   * Get query
   * @return query
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<FilterField> getQuery() {
    return query;
  }


  public void setQuery(List<FilterField> query) {
    this.query = query;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MergeBranchRequest mergeBranchRequest = (MergeBranchRequest) o;
    return Objects.equals(this.mergeRecordOptions, mergeBranchRequest.mergeRecordOptions) &&
        Objects.equals(this.mergeRecordConflicts, mergeBranchRequest.mergeRecordConflicts) &&
        Objects.equals(this.useLastMergeResolve, mergeBranchRequest.useLastMergeResolve) &&
        Objects.equals(this.checkMismatchedColumnType, mergeBranchRequest.checkMismatchedColumnType) &&
        Objects.equals(this.query, mergeBranchRequest.query);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mergeRecordOptions, mergeRecordConflicts, useLastMergeResolve, checkMismatchedColumnType, query);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MergeBranchRequest {\n");
    sb.append("    mergeRecordOptions: ").append(toIndentedString(mergeRecordOptions)).append("\n");
    sb.append("    mergeRecordConflicts: ").append(toIndentedString(mergeRecordConflicts)).append("\n");
    sb.append("    useLastMergeResolve: ").append(toIndentedString(useLastMergeResolve)).append("\n");
    sb.append("    checkMismatchedColumnType: ").append(toIndentedString(checkMismatchedColumnType)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("mergeRecordOptions");
    openapiFields.add("mergeRecordConflicts");
    openapiFields.add("useLastMergeResolve");
    openapiFields.add("checkMismatchedColumnType");
    openapiFields.add("query");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MergeBranchRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!MergeBranchRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MergeBranchRequest is not found in the empty JSON string", MergeBranchRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!MergeBranchRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MergeBranchRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("mergeRecordOptions") != null && !jsonObj.get("mergeRecordOptions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `mergeRecordOptions` to be an array in the JSON string but got `%s`", jsonObj.get("mergeRecordOptions").toString()));
      }
      if (jsonObj.get("mergeRecordConflicts") != null && !jsonObj.get("mergeRecordConflicts").isJsonNull()) {
        JsonArray jsonArraymergeRecordConflicts = jsonObj.getAsJsonArray("mergeRecordConflicts");
        if (jsonArraymergeRecordConflicts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("mergeRecordConflicts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `mergeRecordConflicts` to be an array in the JSON string but got `%s`", jsonObj.get("mergeRecordConflicts").toString()));
          }

          // validate the optional field `mergeRecordConflicts` (array)
          for (int i = 0; i < jsonArraymergeRecordConflicts.size(); i++) {
            MergeRecordConflict.validateJsonObject(jsonArraymergeRecordConflicts.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("query") != null && !jsonObj.get("query").isJsonNull()) {
        JsonArray jsonArrayquery = jsonObj.getAsJsonArray("query");
        if (jsonArrayquery != null) {
          // ensure the json data is an array
          if (!jsonObj.get("query").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `query` to be an array in the JSON string but got `%s`", jsonObj.get("query").toString()));
          }

          // validate the optional field `query` (array)
          for (int i = 0; i < jsonArrayquery.size(); i++) {
            FilterField.validateJsonObject(jsonArrayquery.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MergeBranchRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MergeBranchRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MergeBranchRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MergeBranchRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<MergeBranchRequest>() {
           @Override
           public void write(JsonWriter out, MergeBranchRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MergeBranchRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MergeBranchRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MergeBranchRequest
  * @throws IOException if the JSON string is invalid with respect to MergeBranchRequest
  */
  public static MergeBranchRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MergeBranchRequest.class);
  }

 /**
  * Convert an instance of MergeBranchRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

