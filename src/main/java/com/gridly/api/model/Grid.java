/*
 * Gridly API
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 4.29.1
 * Contact: support@gridly.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.gridly.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.gridly.api.model.ViewColumn;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.gridly.api.client.JSON;

/**
 * Grid
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Grid implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_COLUMNS = "columns";
  @SerializedName(SERIALIZED_NAME_COLUMNS)
  private List<ViewColumn> columns = null;

  public static final String SERIALIZED_NAME_DEFAULT_ACCESS_VIEW_ID = "defaultAccessViewId";
  @SerializedName(SERIALIZED_NAME_DEFAULT_ACCESS_VIEW_ID)
  private String defaultAccessViewId;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Map<String, String> metadata = null;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Gets or Sets recordIdentifierType
   */
  @JsonAdapter(RecordIdentifierTypeEnum.Adapter.class)
  public enum RecordIdentifierTypeEnum {
    RECORDID("recordId"),
    
    PATHTAGRECORDID("pathTagRecordId");

    private String value;

    RecordIdentifierTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RecordIdentifierTypeEnum fromValue(String value) {
      for (RecordIdentifierTypeEnum b : RecordIdentifierTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RecordIdentifierTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RecordIdentifierTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RecordIdentifierTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RecordIdentifierTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_RECORD_IDENTIFIER_TYPE = "recordIdentifierType";
  @SerializedName(SERIALIZED_NAME_RECORD_IDENTIFIER_TYPE)
  private RecordIdentifierTypeEnum recordIdentifierType;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    DELETED("deleted"),
    
    ACTIVE("active"),
    
    INACTIVE("inactive"),
    
    RESTORING("restoring"),
    
    BACKINGUP("backingUp"),
    
    UPLOADING("uploading"),
    
    IMPORTING("importing"),
    
    BRANCHING("branching"),
    
    MERGING("merging"),
    
    DUPLICATING("duplicating"),
    
    CLEARINGRECORDS("clearingRecords"),
    
    COPYING("copying");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public Grid() {
  }

  public Grid id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public Grid columns(List<ViewColumn> columns) {
    
    this.columns = columns;
    return this;
  }

  public Grid addColumnsItem(ViewColumn columnsItem) {
    if (this.columns == null) {
      this.columns = new ArrayList<>();
    }
    this.columns.add(columnsItem);
    return this;
  }

   /**
   * Get columns
   * @return columns
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ViewColumn> getColumns() {
    return columns;
  }


  public void setColumns(List<ViewColumn> columns) {
    this.columns = columns;
  }


  public Grid defaultAccessViewId(String defaultAccessViewId) {
    
    this.defaultAccessViewId = defaultAccessViewId;
    return this;
  }

   /**
   * Get defaultAccessViewId
   * @return defaultAccessViewId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDefaultAccessViewId() {
    return defaultAccessViewId;
  }


  public void setDefaultAccessViewId(String defaultAccessViewId) {
    this.defaultAccessViewId = defaultAccessViewId;
  }


  public Grid description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public Grid metadata(Map<String, String> metadata) {
    
    this.metadata = metadata;
    return this;
  }

  public Grid putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, String> getMetadata() {
    return metadata;
  }


  public void setMetadata(Map<String, String> metadata) {
    this.metadata = metadata;
  }


  public Grid name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public Grid recordIdentifierType(RecordIdentifierTypeEnum recordIdentifierType) {
    
    this.recordIdentifierType = recordIdentifierType;
    return this;
  }

   /**
   * Get recordIdentifierType
   * @return recordIdentifierType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public RecordIdentifierTypeEnum getRecordIdentifierType() {
    return recordIdentifierType;
  }


  public void setRecordIdentifierType(RecordIdentifierTypeEnum recordIdentifierType) {
    this.recordIdentifierType = recordIdentifierType;
  }


  public Grid status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Grid grid = (Grid) o;
    return Objects.equals(this.id, grid.id) &&
        Objects.equals(this.columns, grid.columns) &&
        Objects.equals(this.defaultAccessViewId, grid.defaultAccessViewId) &&
        Objects.equals(this.description, grid.description) &&
        Objects.equals(this.metadata, grid.metadata) &&
        Objects.equals(this.name, grid.name) &&
        Objects.equals(this.recordIdentifierType, grid.recordIdentifierType) &&
        Objects.equals(this.status, grid.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, columns, defaultAccessViewId, description, metadata, name, recordIdentifierType, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Grid {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    columns: ").append(toIndentedString(columns)).append("\n");
    sb.append("    defaultAccessViewId: ").append(toIndentedString(defaultAccessViewId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    recordIdentifierType: ").append(toIndentedString(recordIdentifierType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("columns");
    openapiFields.add("defaultAccessViewId");
    openapiFields.add("description");
    openapiFields.add("metadata");
    openapiFields.add("name");
    openapiFields.add("recordIdentifierType");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Grid
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Grid.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Grid is not found in the empty JSON string", Grid.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Grid.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Grid` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      JsonArray jsonArraycolumns = jsonObj.getAsJsonArray("columns");
      if (jsonArraycolumns != null) {
        // ensure the json data is an array
        if (!jsonObj.get("columns").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `columns` to be an array in the JSON string but got `%s`", jsonObj.get("columns").toString()));
        }

        // validate the optional field `columns` (array)
        for (int i = 0; i < jsonArraycolumns.size(); i++) {
          ViewColumn.validateJsonObject(jsonArraycolumns.get(i).getAsJsonObject());
        };
      }
      if ((jsonObj.get("defaultAccessViewId") != null && !jsonObj.get("defaultAccessViewId").isJsonNull()) && !jsonObj.get("defaultAccessViewId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultAccessViewId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultAccessViewId").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("recordIdentifierType") != null && !jsonObj.get("recordIdentifierType").isJsonNull()) && !jsonObj.get("recordIdentifierType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recordIdentifierType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recordIdentifierType").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Grid.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Grid' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Grid> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Grid.class));

       return (TypeAdapter<T>) new TypeAdapter<Grid>() {
           @Override
           public void write(JsonWriter out, Grid value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Grid read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Grid given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Grid
  * @throws IOException if the JSON string is invalid with respect to Grid
  */
  public static Grid fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Grid.class);
  }

 /**
  * Convert an instance of Grid to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

