/*
 * Gridly API
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 4.29.1
 * Contact: support@gridly.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.gridly.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.gridly.api.model.DateTimeFormat;
import com.gridly.api.model.Formula;
import com.gridly.api.model.NumberFormat;
import com.gridly.api.model.Reference;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.gridly.api.client.JSON;

/**
 * AddViewColumn
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AddViewColumn implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_EDITABLE = "editable";
  @SerializedName(SERIALIZED_NAME_EDITABLE)
  private Boolean editable;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    SINGLELINE("singleLine"),
    
    MULTIPLELINES("multipleLines"),
    
    RICHTEXT("richText"),
    
    MARKDOWN("markdown"),
    
    SINGLESELECTION("singleSelection"),
    
    MULTIPLESELECTIONS("multipleSelections"),
    
    BOOLEAN("boolean"),
    
    NUMBER("number"),
    
    DATETIME("datetime"),
    
    FILES("files"),
    
    REFERENCE("reference"),
    
    LOOKUP("lookup"),
    
    LANGUAGE("language"),
    
    JSON("json"),
    
    YAML("yaml"),
    
    HTML("html"),
    
    FORMULA("formula");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  /**
   * Gets or Sets languageCode
   */
  @JsonAdapter(LanguageCodeEnum.Adapter.class)
  public enum LanguageCodeEnum {
    ENUS("enUS"),
    
    ARSA("arSA"),
    
    CAES("caES"),
    
    ZHCN("zhCN"),
    
    ZHTW("zhTW"),
    
    DEDE("deDE"),
    
    ITIT("itIT"),
    
    JAJP("jaJP"),
    
    KOKR("koKR"),
    
    PLPL("plPL"),
    
    PTAO("ptAO"),
    
    PTBR("ptBR"),
    
    RURU("ruRU"),
    
    ESMX("esMX"),
    
    ESLA("esLA"),
    
    ESES("esES"),
    
    BNBD("bnBD"),
    
    BGBG("bgBG"),
    
    ZHHK("zhHK"),
    
    CSCZ("csCZ"),
    
    DADK("daDK"),
    
    NLNL("nlNL"),
    
    FIFI("fiFI"),
    
    FRFR("frFR"),
    
    FRCA("frCA"),
    
    ELGR("elGR"),
    
    HEIL("heIL"),
    
    HIIN("hiIN"),
    
    HUHU("huHU"),
    
    IDID("idID"),
    
    JWID("jwID"),
    
    LVLV("lvLV"),
    
    MSMY("msMY"),
    
    NONO("noNO"),
    
    PTPT("ptPT"),
    
    RORO("roRO"),
    
    SKSK("skSK"),
    
    SVSE("svSE"),
    
    TLPH("tlPH"),
    
    THTH("thTH"),
    
    TRTR("trTR"),
    
    UKUA("ukUA"),
    
    URIN("urIN"),
    
    VIVN("viVN"),
    
    AFZA("afZA"),
    
    ARAE("arAE"),
    
    ARBH("arBH"),
    
    ARDZ("arDZ"),
    
    AREG("arEG"),
    
    ARIQ("arIQ"),
    
    ARJO("arJO"),
    
    ARKW("arKW"),
    
    ARLB("arLB"),
    
    ARLY("arLY"),
    
    ARMA("arMA"),
    
    AROM("arOM"),
    
    ARQA("arQA"),
    
    ARSY("arSY"),
    
    ARTN("arTN"),
    
    ARYE("arYE"),
    
    AZAZ("azAZ"),
    
    BEBY("beBY"),
    
    BSBA("bsBA"),
    
    CYGB("cyGB"),
    
    DEAT("deAT"),
    
    DECH("deCH"),
    
    DELI("deLI"),
    
    DELU("deLU"),
    
    DVMV("dvMV"),
    
    ENAU("enAU"),
    
    ENBZ("enBZ"),
    
    ENCA("enCA"),
    
    ENGB("enGB"),
    
    ENIE("enIE"),
    
    ENJM("enJM"),
    
    ENNZ("enNZ"),
    
    ENPH("enPH"),
    
    ENTT("enTT"),
    
    ENZA("enZA"),
    
    ENZW("enZW"),
    
    ENSG("enSG"),
    
    ENIN("enIN"),
    
    ENGH("enGH"),
    
    ENRW("enRW"),
    
    ENZM("enZM"),
    
    ENKE("enKE"),
    
    ENNG("enNG"),
    
    ESAR("esAR"),
    
    ESBO("esBO"),
    
    ESCL("esCL"),
    
    ESCO("esCO"),
    
    ESCR("esCR"),
    
    ESDO("esDO"),
    
    ESEC("esEC"),
    
    ESGT("esGT"),
    
    ESHN("esHN"),
    
    ESNI("esNI"),
    
    ESPA("esPA"),
    
    ESPE("esPE"),
    
    ESPR("esPR"),
    
    ESPY("esPY"),
    
    ESSV("esSV"),
    
    ESUY("esUY"),
    
    ESVE("esVE"),
    
    ETEE("etEE"),
    
    EUES("euES"),
    
    FAIR("faIR"),
    
    FOFO("foFO"),
    
    FRBE("frBE"),
    
    FRCH("frCH"),
    
    FRLU("frLU"),
    
    FRMC("frMC"),
    
    GLES("glES"),
    
    GUIN("guIN"),
    
    HRBA("hrBA"),
    
    HRHR("hrHR"),
    
    HYAM("hyAM"),
    
    ISIS("isIS"),
    
    ITCH("itCH"),
    
    KAGE("kaGE"),
    
    KKKZ("kkKZ"),
    
    KNIN("knIN"),
    
    KOKIN("kokIN"),
    
    KYKG("kyKG"),
    
    LTLT("ltLT"),
    
    MINZ("miNZ"),
    
    MKMK("mkMK"),
    
    MNMN("mnMN"),
    
    MRIN("mrIN"),
    
    MSBN("msBN"),
    
    MTMT("mtMT"),
    
    NBNO("nbNO"),
    
    NLBE("nlBE"),
    
    NNNO("nnNO"),
    
    NSZA("nsZA"),
    
    PAIN("paIN"),
    
    PSAR("psAR"),
    
    QUBO("quBO"),
    
    QUEC("quEC"),
    
    QUPE("quPE"),
    
    SAIN("saIN"),
    
    SEFI("seFI"),
    
    SENO("seNO"),
    
    SESE("seSE"),
    
    SLSI("slSI"),
    
    SQAL("sqAL"),
    
    SRBA("srBA"),
    
    SRRS("srRS"),
    
    SRME("srME"),
    
    SVFI("svFI"),
    
    SWKE("swKE"),
    
    SYRSY("syrSY"),
    
    TAIN("taIN"),
    
    TEIN("teIN"),
    
    TNZA("tnZA"),
    
    TTRU("ttRU"),
    
    URPK("urPK"),
    
    UZUZ("uzUZ"),
    
    XHZA("xhZA"),
    
    ZHMO("zhMO"),
    
    ZHSG("zhSG"),
    
    ZUZA("zuZA"),
    
    AM("am"),
    
    HY("hy"),
    
    AZ("az"),
    
    BN("bn"),
    
    BS("bs"),
    
    CA("ca"),
    
    HR("hr"),
    
    DA("da"),
    
    NL("nl"),
    
    EN("en"),
    
    FI("fi"),
    
    FR("fr"),
    
    HI("hi"),
    
    HU("hu"),
    
    ID("id"),
    
    IT("it"),
    
    KM("km"),
    
    MI("mi"),
    
    PS("ps"),
    
    RU("ru"),
    
    SL("sl"),
    
    ES("es"),
    
    SW("sw"),
    
    TA("ta"),
    
    UR("ur"),
    
    AF("af"),
    
    ET("et"),
    
    GL("gl"),
    
    JA("ja"),
    
    KK("kk"),
    
    KY("ky"),
    
    MK("mk"),
    
    MS("ms"),
    
    SE("se"),
    
    PL("pl"),
    
    PA("pa"),
    
    RO("ro"),
    
    SK("sk"),
    
    SV("sv"),
    
    TT("tt"),
    
    TE("te"),
    
    TR("tr"),
    
    UZ("uz"),
    
    VI("vi"),
    
    EU("eu"),
    
    BE("be"),
    
    CS("cs"),
    
    DE("de"),
    
    GU("gu"),
    
    HE("he"),
    
    IS("is"),
    
    KO("ko"),
    
    LT("lt"),
    
    MR("mr"),
    
    MN("mn"),
    
    NB("nb"),
    
    NN("nn"),
    
    PT("pt"),
    
    SA("sa"),
    
    TN("tn"),
    
    UK("uk"),
    
    XH("xh"),
    
    SQ("sq"),
    
    AR("ar"),
    
    BG("bg"),
    
    ZH("zh"),
    
    DV("dv"),
    
    FO("fo"),
    
    FA("fa"),
    
    KA("ka"),
    
    EL("el"),
    
    KN("kn"),
    
    LV("lv"),
    
    MT("mt"),
    
    QU("qu"),
    
    SR("sr"),
    
    SI("si"),
    
    TL("tl"),
    
    TH("th"),
    
    CY("cy"),
    
    ZU("zu"),
    
    NO("no");

    private String value;

    LanguageCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LanguageCodeEnum fromValue(String value) {
      for (LanguageCodeEnum b : LanguageCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LanguageCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LanguageCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LanguageCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LanguageCodeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_LANGUAGE_CODE = "languageCode";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_CODE)
  private LanguageCodeEnum languageCode;

  /**
   * Gets or Sets localizationType
   */
  @JsonAdapter(LocalizationTypeEnum.Adapter.class)
  public enum LocalizationTypeEnum {
    SOURCELANGUAGE("sourceLanguage"),
    
    TARGETLANGUAGE("targetLanguage");

    private String value;

    LocalizationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LocalizationTypeEnum fromValue(String value) {
      for (LocalizationTypeEnum b : LocalizationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LocalizationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LocalizationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LocalizationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LocalizationTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_LOCALIZATION_TYPE = "localizationType";
  @SerializedName(SERIALIZED_NAME_LOCALIZATION_TYPE)
  private LocalizationTypeEnum localizationType;

  public static final String SERIALIZED_NAME_NUMBER_FORMAT = "numberFormat";
  @SerializedName(SERIALIZED_NAME_NUMBER_FORMAT)
  private NumberFormat numberFormat;

  public static final String SERIALIZED_NAME_SELECTION_OPTIONS = "selectionOptions";
  @SerializedName(SERIALIZED_NAME_SELECTION_OPTIONS)
  private List<String> selectionOptions = null;

  public static final String SERIALIZED_NAME_REFERENCE = "reference";
  @SerializedName(SERIALIZED_NAME_REFERENCE)
  private Reference reference;

  public static final String SERIALIZED_NAME_FORMULA = "formula";
  @SerializedName(SERIALIZED_NAME_FORMULA)
  private Formula formula;

  public static final String SERIALIZED_NAME_DATE_TIME_FORMAT = "dateTimeFormat";
  @SerializedName(SERIALIZED_NAME_DATE_TIME_FORMAT)
  private DateTimeFormat dateTimeFormat;

  public AddViewColumn() {
  }

  public AddViewColumn id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public AddViewColumn editable(Boolean editable) {
    
    this.editable = editable;
    return this;
  }

   /**
   * Get editable
   * @return editable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean isEditable() {
    return editable;
  }


  public void setEditable(Boolean editable) {
    this.editable = editable;
  }


  public AddViewColumn name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public AddViewColumn description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public AddViewColumn type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  public AddViewColumn languageCode(LanguageCodeEnum languageCode) {
    
    this.languageCode = languageCode;
    return this;
  }

   /**
   * Get languageCode
   * @return languageCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LanguageCodeEnum getLanguageCode() {
    return languageCode;
  }


  public void setLanguageCode(LanguageCodeEnum languageCode) {
    this.languageCode = languageCode;
  }


  public AddViewColumn localizationType(LocalizationTypeEnum localizationType) {
    
    this.localizationType = localizationType;
    return this;
  }

   /**
   * Get localizationType
   * @return localizationType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LocalizationTypeEnum getLocalizationType() {
    return localizationType;
  }


  public void setLocalizationType(LocalizationTypeEnum localizationType) {
    this.localizationType = localizationType;
  }


  public AddViewColumn numberFormat(NumberFormat numberFormat) {
    
    this.numberFormat = numberFormat;
    return this;
  }

   /**
   * Get numberFormat
   * @return numberFormat
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public NumberFormat getNumberFormat() {
    return numberFormat;
  }


  public void setNumberFormat(NumberFormat numberFormat) {
    this.numberFormat = numberFormat;
  }


  public AddViewColumn selectionOptions(List<String> selectionOptions) {
    
    this.selectionOptions = selectionOptions;
    return this;
  }

  public AddViewColumn addSelectionOptionsItem(String selectionOptionsItem) {
    if (this.selectionOptions == null) {
      this.selectionOptions = new ArrayList<>();
    }
    this.selectionOptions.add(selectionOptionsItem);
    return this;
  }

   /**
   * Get selectionOptions
   * @return selectionOptions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getSelectionOptions() {
    return selectionOptions;
  }


  public void setSelectionOptions(List<String> selectionOptions) {
    this.selectionOptions = selectionOptions;
  }


  public AddViewColumn reference(Reference reference) {
    
    this.reference = reference;
    return this;
  }

   /**
   * Get reference
   * @return reference
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Reference getReference() {
    return reference;
  }


  public void setReference(Reference reference) {
    this.reference = reference;
  }


  public AddViewColumn formula(Formula formula) {
    
    this.formula = formula;
    return this;
  }

   /**
   * Get formula
   * @return formula
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Formula getFormula() {
    return formula;
  }


  public void setFormula(Formula formula) {
    this.formula = formula;
  }


  public AddViewColumn dateTimeFormat(DateTimeFormat dateTimeFormat) {
    
    this.dateTimeFormat = dateTimeFormat;
    return this;
  }

   /**
   * Get dateTimeFormat
   * @return dateTimeFormat
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DateTimeFormat getDateTimeFormat() {
    return dateTimeFormat;
  }


  public void setDateTimeFormat(DateTimeFormat dateTimeFormat) {
    this.dateTimeFormat = dateTimeFormat;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddViewColumn addViewColumn = (AddViewColumn) o;
    return Objects.equals(this.id, addViewColumn.id) &&
        Objects.equals(this.editable, addViewColumn.editable) &&
        Objects.equals(this.name, addViewColumn.name) &&
        Objects.equals(this.description, addViewColumn.description) &&
        Objects.equals(this.type, addViewColumn.type) &&
        Objects.equals(this.languageCode, addViewColumn.languageCode) &&
        Objects.equals(this.localizationType, addViewColumn.localizationType) &&
        Objects.equals(this.numberFormat, addViewColumn.numberFormat) &&
        Objects.equals(this.selectionOptions, addViewColumn.selectionOptions) &&
        Objects.equals(this.reference, addViewColumn.reference) &&
        Objects.equals(this.formula, addViewColumn.formula) &&
        Objects.equals(this.dateTimeFormat, addViewColumn.dateTimeFormat);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, editable, name, description, type, languageCode, localizationType, numberFormat, selectionOptions, reference, formula, dateTimeFormat);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddViewColumn {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    editable: ").append(toIndentedString(editable)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    languageCode: ").append(toIndentedString(languageCode)).append("\n");
    sb.append("    localizationType: ").append(toIndentedString(localizationType)).append("\n");
    sb.append("    numberFormat: ").append(toIndentedString(numberFormat)).append("\n");
    sb.append("    selectionOptions: ").append(toIndentedString(selectionOptions)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    formula: ").append(toIndentedString(formula)).append("\n");
    sb.append("    dateTimeFormat: ").append(toIndentedString(dateTimeFormat)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("editable");
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("type");
    openapiFields.add("languageCode");
    openapiFields.add("localizationType");
    openapiFields.add("numberFormat");
    openapiFields.add("selectionOptions");
    openapiFields.add("reference");
    openapiFields.add("formula");
    openapiFields.add("dateTimeFormat");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AddViewColumn
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (AddViewColumn.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddViewColumn is not found in the empty JSON string", AddViewColumn.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!AddViewColumn.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AddViewColumn` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("languageCode") != null && !jsonObj.get("languageCode").isJsonNull()) && !jsonObj.get("languageCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `languageCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("languageCode").toString()));
      }
      if ((jsonObj.get("localizationType") != null && !jsonObj.get("localizationType").isJsonNull()) && !jsonObj.get("localizationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localizationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localizationType").toString()));
      }
      // validate the optional field `numberFormat`
      if (jsonObj.get("numberFormat") != null && !jsonObj.get("numberFormat").isJsonNull()) {
        NumberFormat.validateJsonObject(jsonObj.getAsJsonObject("numberFormat"));
      }
      // ensure the json data is an array
      if ((jsonObj.get("selectionOptions") != null && !jsonObj.get("selectionOptions").isJsonNull()) && !jsonObj.get("selectionOptions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `selectionOptions` to be an array in the JSON string but got `%s`", jsonObj.get("selectionOptions").toString()));
      }
      // validate the optional field `reference`
      if (jsonObj.get("reference") != null && !jsonObj.get("reference").isJsonNull()) {
        Reference.validateJsonObject(jsonObj.getAsJsonObject("reference"));
      }
      // validate the optional field `formula`
      if (jsonObj.get("formula") != null && !jsonObj.get("formula").isJsonNull()) {
        Formula.validateJsonObject(jsonObj.getAsJsonObject("formula"));
      }
      // validate the optional field `dateTimeFormat`
      if (jsonObj.get("dateTimeFormat") != null && !jsonObj.get("dateTimeFormat").isJsonNull()) {
        DateTimeFormat.validateJsonObject(jsonObj.getAsJsonObject("dateTimeFormat"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddViewColumn.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddViewColumn' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddViewColumn> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddViewColumn.class));

       return (TypeAdapter<T>) new TypeAdapter<AddViewColumn>() {
           @Override
           public void write(JsonWriter out, AddViewColumn value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AddViewColumn read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AddViewColumn given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AddViewColumn
  * @throws IOException if the JSON string is invalid with respect to AddViewColumn
  */
  public static AddViewColumn fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddViewColumn.class);
  }

 /**
  * Convert an instance of AddViewColumn to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

