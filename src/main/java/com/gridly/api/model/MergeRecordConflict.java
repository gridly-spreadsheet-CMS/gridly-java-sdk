/*
 * Gridly API
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 5.9.0
 * Contact: support@gridly.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.gridly.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.gridly.api.model.MergeCellConflict;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.gridly.api.client.JSON;

/**
 * MergeRecordConflict
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class MergeRecordConflict implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_CELLS = "cells";
  @SerializedName(SERIALIZED_NAME_CELLS)
  private List<MergeCellConflict> cells = null;

  public static final String SERIALIZED_NAME_PATH_TAG = "pathTag";
  @SerializedName(SERIALIZED_NAME_PATH_TAG)
  private String pathTag;

  public static final String SERIALIZED_NAME_RECORD_ID = "recordId";
  @SerializedName(SERIALIZED_NAME_RECORD_ID)
  private String recordId;

  public MergeRecordConflict() {
  }

  public MergeRecordConflict cells(List<MergeCellConflict> cells) {
    
    this.cells = cells;
    return this;
  }

  public MergeRecordConflict addCellsItem(MergeCellConflict cellsItem) {
    if (this.cells == null) {
      this.cells = new ArrayList<>();
    }
    this.cells.add(cellsItem);
    return this;
  }

   /**
   * Get cells
   * @return cells
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<MergeCellConflict> getCells() {
    return cells;
  }


  public void setCells(List<MergeCellConflict> cells) {
    this.cells = cells;
  }


  public MergeRecordConflict pathTag(String pathTag) {
    
    this.pathTag = pathTag;
    return this;
  }

   /**
   * Get pathTag
   * @return pathTag
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPathTag() {
    return pathTag;
  }


  public void setPathTag(String pathTag) {
    this.pathTag = pathTag;
  }


  public MergeRecordConflict recordId(String recordId) {
    
    this.recordId = recordId;
    return this;
  }

   /**
   * Get recordId
   * @return recordId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRecordId() {
    return recordId;
  }


  public void setRecordId(String recordId) {
    this.recordId = recordId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MergeRecordConflict mergeRecordConflict = (MergeRecordConflict) o;
    return Objects.equals(this.cells, mergeRecordConflict.cells) &&
        Objects.equals(this.pathTag, mergeRecordConflict.pathTag) &&
        Objects.equals(this.recordId, mergeRecordConflict.recordId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cells, pathTag, recordId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MergeRecordConflict {\n");
    sb.append("    cells: ").append(toIndentedString(cells)).append("\n");
    sb.append("    pathTag: ").append(toIndentedString(pathTag)).append("\n");
    sb.append("    recordId: ").append(toIndentedString(recordId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cells");
    openapiFields.add("pathTag");
    openapiFields.add("recordId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MergeRecordConflict
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!MergeRecordConflict.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MergeRecordConflict is not found in the empty JSON string", MergeRecordConflict.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!MergeRecordConflict.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MergeRecordConflict` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("cells") != null && !jsonObj.get("cells").isJsonNull()) {
        JsonArray jsonArraycells = jsonObj.getAsJsonArray("cells");
        if (jsonArraycells != null) {
          // ensure the json data is an array
          if (!jsonObj.get("cells").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `cells` to be an array in the JSON string but got `%s`", jsonObj.get("cells").toString()));
          }

          // validate the optional field `cells` (array)
          for (int i = 0; i < jsonArraycells.size(); i++) {
            MergeCellConflict.validateJsonObject(jsonArraycells.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("pathTag") != null && !jsonObj.get("pathTag").isJsonNull()) && !jsonObj.get("pathTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pathTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pathTag").toString()));
      }
      if ((jsonObj.get("recordId") != null && !jsonObj.get("recordId").isJsonNull()) && !jsonObj.get("recordId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recordId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recordId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MergeRecordConflict.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MergeRecordConflict' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MergeRecordConflict> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MergeRecordConflict.class));

       return (TypeAdapter<T>) new TypeAdapter<MergeRecordConflict>() {
           @Override
           public void write(JsonWriter out, MergeRecordConflict value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MergeRecordConflict read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MergeRecordConflict given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MergeRecordConflict
  * @throws IOException if the JSON string is invalid with respect to MergeRecordConflict
  */
  public static MergeRecordConflict fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MergeRecordConflict.class);
  }

 /**
  * Convert an instance of MergeRecordConflict to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

