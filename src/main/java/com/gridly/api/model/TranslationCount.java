/*
 * Gridly API
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 4.21.5
 * Contact: support@gridly.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.gridly.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.gridly.api.client.JSON;

/**
 * TranslationCount
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TranslationCount implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ALL = "all";
  @SerializedName(SERIALIZED_NAME_ALL)
  private Long all;

  public static final String SERIALIZED_NAME_OUT_OF_DATE = "outOfDate";
  @SerializedName(SERIALIZED_NAME_OUT_OF_DATE)
  private Long outOfDate;

  public static final String SERIALIZED_NAME_UNSET = "unset";
  @SerializedName(SERIALIZED_NAME_UNSET)
  private Long unset;

  public static final String SERIALIZED_NAME_UP_TO_DATE = "upToDate";
  @SerializedName(SERIALIZED_NAME_UP_TO_DATE)
  private Long upToDate;

  public TranslationCount() {
  }

  public TranslationCount all(Long all) {
    
    this.all = all;
    return this;
  }

   /**
   * Get all
   * @return all
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Long getAll() {
    return all;
  }


  public void setAll(Long all) {
    this.all = all;
  }


  public TranslationCount outOfDate(Long outOfDate) {
    
    this.outOfDate = outOfDate;
    return this;
  }

   /**
   * Get outOfDate
   * @return outOfDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Long getOutOfDate() {
    return outOfDate;
  }


  public void setOutOfDate(Long outOfDate) {
    this.outOfDate = outOfDate;
  }


  public TranslationCount unset(Long unset) {
    
    this.unset = unset;
    return this;
  }

   /**
   * Get unset
   * @return unset
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Long getUnset() {
    return unset;
  }


  public void setUnset(Long unset) {
    this.unset = unset;
  }


  public TranslationCount upToDate(Long upToDate) {
    
    this.upToDate = upToDate;
    return this;
  }

   /**
   * Get upToDate
   * @return upToDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Long getUpToDate() {
    return upToDate;
  }


  public void setUpToDate(Long upToDate) {
    this.upToDate = upToDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TranslationCount translationCount = (TranslationCount) o;
    return Objects.equals(this.all, translationCount.all) &&
        Objects.equals(this.outOfDate, translationCount.outOfDate) &&
        Objects.equals(this.unset, translationCount.unset) &&
        Objects.equals(this.upToDate, translationCount.upToDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(all, outOfDate, unset, upToDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TranslationCount {\n");
    sb.append("    all: ").append(toIndentedString(all)).append("\n");
    sb.append("    outOfDate: ").append(toIndentedString(outOfDate)).append("\n");
    sb.append("    unset: ").append(toIndentedString(unset)).append("\n");
    sb.append("    upToDate: ").append(toIndentedString(upToDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("all");
    openapiFields.add("outOfDate");
    openapiFields.add("unset");
    openapiFields.add("upToDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TranslationCount
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (TranslationCount.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in TranslationCount is not found in the empty JSON string", TranslationCount.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TranslationCount.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TranslationCount` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TranslationCount.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TranslationCount' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TranslationCount> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TranslationCount.class));

       return (TypeAdapter<T>) new TypeAdapter<TranslationCount>() {
           @Override
           public void write(JsonWriter out, TranslationCount value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TranslationCount read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TranslationCount given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TranslationCount
  * @throws IOException if the JSON string is invalid with respect to TranslationCount
  */
  public static TranslationCount fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TranslationCount.class);
  }

 /**
  * Convert an instance of TranslationCount to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

