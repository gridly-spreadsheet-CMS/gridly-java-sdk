/*
 * Gridly API
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 3.29.0
 * Contact: 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.gridly.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.gridly.api.model.Record;
import com.gridly.api.model.ViewColumn;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.gridly.api.client.JSON;

/**
 * View
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class View {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_COLUMNS = "columns";
  @SerializedName(SERIALIZED_NAME_COLUMNS)
  private List<ViewColumn> columns = null;

  public static final String SERIALIZED_NAME_GRID_ID = "gridId";
  @SerializedName(SERIALIZED_NAME_GRID_ID)
  private String gridId;

  /**
   * Gets or Sets gridStatus
   */
  @JsonAdapter(GridStatusEnum.Adapter.class)
  public enum GridStatusEnum {
    DELETED("deleted"),
    
    ACTIVE("active"),
    
    INACTIVE("inactive"),
    
    RESTORING("restoring"),
    
    BACKINGUP("backingUp"),
    
    UPLOADING("uploading"),
    
    IMPORTING("importing"),
    
    BRANCHING("branching"),
    
    MERGING("merging"),
    
    DUPLICATING("duplicating"),
    
    CLEARINGRECORDS("clearingRecords");

    private String value;

    GridStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GridStatusEnum fromValue(String value) {
      for (GridStatusEnum b : GridStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GridStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GridStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GridStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GridStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_GRID_STATUS = "gridStatus";
  @SerializedName(SERIALIZED_NAME_GRID_STATUS)
  private GridStatusEnum gridStatus;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RECORDS = "records";
  @SerializedName(SERIALIZED_NAME_RECORDS)
  private List<Record> records = null;

  public View() { 
  }

  public View id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public View columns(List<ViewColumn> columns) {
    
    this.columns = columns;
    return this;
  }

  public View addColumnsItem(ViewColumn columnsItem) {
    if (this.columns == null) {
      this.columns = new ArrayList<>();
    }
    this.columns.add(columnsItem);
    return this;
  }

   /**
   * Get columns
   * @return columns
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ViewColumn> getColumns() {
    return columns;
  }


  public void setColumns(List<ViewColumn> columns) {
    this.columns = columns;
  }


  public View gridId(String gridId) {
    
    this.gridId = gridId;
    return this;
  }

   /**
   * Get gridId
   * @return gridId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getGridId() {
    return gridId;
  }


  public void setGridId(String gridId) {
    this.gridId = gridId;
  }


  public View gridStatus(GridStatusEnum gridStatus) {
    
    this.gridStatus = gridStatus;
    return this;
  }

   /**
   * Get gridStatus
   * @return gridStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public GridStatusEnum getGridStatus() {
    return gridStatus;
  }


  public void setGridStatus(GridStatusEnum gridStatus) {
    this.gridStatus = gridStatus;
  }


  public View name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public View records(List<Record> records) {
    
    this.records = records;
    return this;
  }

  public View addRecordsItem(Record recordsItem) {
    if (this.records == null) {
      this.records = new ArrayList<>();
    }
    this.records.add(recordsItem);
    return this;
  }

   /**
   * Get records
   * @return records
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Record> getRecords() {
    return records;
  }


  public void setRecords(List<Record> records) {
    this.records = records;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    View view = (View) o;
    return Objects.equals(this.id, view.id) &&
        Objects.equals(this.columns, view.columns) &&
        Objects.equals(this.gridId, view.gridId) &&
        Objects.equals(this.gridStatus, view.gridStatus) &&
        Objects.equals(this.name, view.name) &&
        Objects.equals(this.records, view.records);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, columns, gridId, gridStatus, name, records);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class View {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    columns: ").append(toIndentedString(columns)).append("\n");
    sb.append("    gridId: ").append(toIndentedString(gridId)).append("\n");
    sb.append("    gridStatus: ").append(toIndentedString(gridStatus)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    records: ").append(toIndentedString(records)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("columns");
    openapiFields.add("gridId");
    openapiFields.add("gridStatus");
    openapiFields.add("name");
    openapiFields.add("records");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to View
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (View.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in View is not found in the empty JSON string", View.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!View.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `View` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("id") != null && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      JsonArray jsonArraycolumns = jsonObj.getAsJsonArray("columns");
      if (jsonArraycolumns != null) {
        // ensure the json data is an array
        if (!jsonObj.get("columns").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `columns` to be an array in the JSON string but got `%s`", jsonObj.get("columns").toString()));
        }

        // validate the optional field `columns` (array)
        for (int i = 0; i < jsonArraycolumns.size(); i++) {
          ViewColumn.validateJsonObject(jsonArraycolumns.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("gridId") != null && !jsonObj.get("gridId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gridId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gridId").toString()));
      }
      if (jsonObj.get("gridStatus") != null && !jsonObj.get("gridStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gridStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gridStatus").toString()));
      }
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      JsonArray jsonArrayrecords = jsonObj.getAsJsonArray("records");
      if (jsonArrayrecords != null) {
        // ensure the json data is an array
        if (!jsonObj.get("records").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `records` to be an array in the JSON string but got `%s`", jsonObj.get("records").toString()));
        }

        // validate the optional field `records` (array)
        for (int i = 0; i < jsonArrayrecords.size(); i++) {
          Record.validateJsonObject(jsonArrayrecords.get(i).getAsJsonObject());
        };
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!View.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'View' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<View> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(View.class));

       return (TypeAdapter<T>) new TypeAdapter<View>() {
           @Override
           public void write(JsonWriter out, View value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public View read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of View given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of View
  * @throws IOException if the JSON string is invalid with respect to View
  */
  public static View fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, View.class);
  }

 /**
  * Convert an instance of View to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

