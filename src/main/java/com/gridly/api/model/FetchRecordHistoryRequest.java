/*
 * Gridly API
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 4.29.1
 * Contact: support@gridly.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.gridly.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.gridly.api.client.JSON;

/**
 * FetchRecordHistoryRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FetchRecordHistoryRequest implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_COLUMN_IDS = "columnIds";
  @SerializedName(SERIALIZED_NAME_COLUMN_IDS)
  private List<String> columnIds = null;

  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  private String query;

  public static final String SERIALIZED_NAME_SORT = "sort";
  @SerializedName(SERIALIZED_NAME_SORT)
  private String sort;

  public static final String SERIALIZED_NAME_GROUP_BY = "groupBy";
  @SerializedName(SERIALIZED_NAME_GROUP_BY)
  private List<String> groupBy = null;

  public static final String SERIALIZED_NAME_PAGE = "page";
  @SerializedName(SERIALIZED_NAME_PAGE)
  private String page;

  public static final String SERIALIZED_NAME_FETCH_OPTIONS = "fetchOptions";
  @SerializedName(SERIALIZED_NAME_FETCH_OPTIONS)
  private String fetchOptions;

  public static final String SERIALIZED_NAME_INCLUDE_SYSTEM_USER = "includeSystemUser";
  @SerializedName(SERIALIZED_NAME_INCLUDE_SYSTEM_USER)
  private Boolean includeSystemUser;

  public FetchRecordHistoryRequest() {
  }

  public FetchRecordHistoryRequest columnIds(List<String> columnIds) {
    
    this.columnIds = columnIds;
    return this;
  }

  public FetchRecordHistoryRequest addColumnIdsItem(String columnIdsItem) {
    if (this.columnIds == null) {
      this.columnIds = new ArrayList<>();
    }
    this.columnIds.add(columnIdsItem);
    return this;
  }

   /**
   * Get columnIds
   * @return columnIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getColumnIds() {
    return columnIds;
  }


  public void setColumnIds(List<String> columnIds) {
    this.columnIds = columnIds;
  }


  public FetchRecordHistoryRequest query(String query) {
    
    this.query = query;
    return this;
  }

   /**
   * Get query
   * @return query
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getQuery() {
    return query;
  }


  public void setQuery(String query) {
    this.query = query;
  }


  public FetchRecordHistoryRequest sort(String sort) {
    
    this.sort = sort;
    return this;
  }

   /**
   * Get sort
   * @return sort
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSort() {
    return sort;
  }


  public void setSort(String sort) {
    this.sort = sort;
  }


  public FetchRecordHistoryRequest groupBy(List<String> groupBy) {
    
    this.groupBy = groupBy;
    return this;
  }

  public FetchRecordHistoryRequest addGroupByItem(String groupByItem) {
    if (this.groupBy == null) {
      this.groupBy = new ArrayList<>();
    }
    this.groupBy.add(groupByItem);
    return this;
  }

   /**
   * Get groupBy
   * @return groupBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getGroupBy() {
    return groupBy;
  }


  public void setGroupBy(List<String> groupBy) {
    this.groupBy = groupBy;
  }


  public FetchRecordHistoryRequest page(String page) {
    
    this.page = page;
    return this;
  }

   /**
   * Get page
   * @return page
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPage() {
    return page;
  }


  public void setPage(String page) {
    this.page = page;
  }


  public FetchRecordHistoryRequest fetchOptions(String fetchOptions) {
    
    this.fetchOptions = fetchOptions;
    return this;
  }

   /**
   * Get fetchOptions
   * @return fetchOptions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFetchOptions() {
    return fetchOptions;
  }


  public void setFetchOptions(String fetchOptions) {
    this.fetchOptions = fetchOptions;
  }


  public FetchRecordHistoryRequest includeSystemUser(Boolean includeSystemUser) {
    
    this.includeSystemUser = includeSystemUser;
    return this;
  }

   /**
   * Get includeSystemUser
   * @return includeSystemUser
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean isIncludeSystemUser() {
    return includeSystemUser;
  }


  public void setIncludeSystemUser(Boolean includeSystemUser) {
    this.includeSystemUser = includeSystemUser;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FetchRecordHistoryRequest fetchRecordHistoryRequest = (FetchRecordHistoryRequest) o;
    return Objects.equals(this.columnIds, fetchRecordHistoryRequest.columnIds) &&
        Objects.equals(this.query, fetchRecordHistoryRequest.query) &&
        Objects.equals(this.sort, fetchRecordHistoryRequest.sort) &&
        Objects.equals(this.groupBy, fetchRecordHistoryRequest.groupBy) &&
        Objects.equals(this.page, fetchRecordHistoryRequest.page) &&
        Objects.equals(this.fetchOptions, fetchRecordHistoryRequest.fetchOptions) &&
        Objects.equals(this.includeSystemUser, fetchRecordHistoryRequest.includeSystemUser);
  }

  @Override
  public int hashCode() {
    return Objects.hash(columnIds, query, sort, groupBy, page, fetchOptions, includeSystemUser);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FetchRecordHistoryRequest {\n");
    sb.append("    columnIds: ").append(toIndentedString(columnIds)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    sort: ").append(toIndentedString(sort)).append("\n");
    sb.append("    groupBy: ").append(toIndentedString(groupBy)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    fetchOptions: ").append(toIndentedString(fetchOptions)).append("\n");
    sb.append("    includeSystemUser: ").append(toIndentedString(includeSystemUser)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("columnIds");
    openapiFields.add("query");
    openapiFields.add("sort");
    openapiFields.add("groupBy");
    openapiFields.add("page");
    openapiFields.add("fetchOptions");
    openapiFields.add("includeSystemUser");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to FetchRecordHistoryRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (FetchRecordHistoryRequest.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in FetchRecordHistoryRequest is not found in the empty JSON string", FetchRecordHistoryRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!FetchRecordHistoryRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FetchRecordHistoryRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if ((jsonObj.get("columnIds") != null && !jsonObj.get("columnIds").isJsonNull()) && !jsonObj.get("columnIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `columnIds` to be an array in the JSON string but got `%s`", jsonObj.get("columnIds").toString()));
      }
      if ((jsonObj.get("query") != null && !jsonObj.get("query").isJsonNull()) && !jsonObj.get("query").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query").toString()));
      }
      if ((jsonObj.get("sort") != null && !jsonObj.get("sort").isJsonNull()) && !jsonObj.get("sort").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sort` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sort").toString()));
      }
      // ensure the json data is an array
      if ((jsonObj.get("groupBy") != null && !jsonObj.get("groupBy").isJsonNull()) && !jsonObj.get("groupBy").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupBy` to be an array in the JSON string but got `%s`", jsonObj.get("groupBy").toString()));
      }
      if ((jsonObj.get("page") != null && !jsonObj.get("page").isJsonNull()) && !jsonObj.get("page").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `page` to be a primitive type in the JSON string but got `%s`", jsonObj.get("page").toString()));
      }
      if ((jsonObj.get("fetchOptions") != null && !jsonObj.get("fetchOptions").isJsonNull()) && !jsonObj.get("fetchOptions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fetchOptions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fetchOptions").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FetchRecordHistoryRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FetchRecordHistoryRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FetchRecordHistoryRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FetchRecordHistoryRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<FetchRecordHistoryRequest>() {
           @Override
           public void write(JsonWriter out, FetchRecordHistoryRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FetchRecordHistoryRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FetchRecordHistoryRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FetchRecordHistoryRequest
  * @throws IOException if the JSON string is invalid with respect to FetchRecordHistoryRequest
  */
  public static FetchRecordHistoryRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FetchRecordHistoryRequest.class);
  }

 /**
  * Convert an instance of FetchRecordHistoryRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

