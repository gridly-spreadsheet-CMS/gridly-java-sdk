/*
 * Gridly API
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 4.15.1
 * Contact: support@gridly.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.gridly.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.gridly.api.client.JSON;

/**
 * MovePath
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class MovePath implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_FROM_PARENT_PATH = "fromParentPath";
  @SerializedName(SERIALIZED_NAME_FROM_PARENT_PATH)
  private String fromParentPath;

  public static final String SERIALIZED_NAME_MOVE_AFTER = "moveAfter";
  @SerializedName(SERIALIZED_NAME_MOVE_AFTER)
  private String moveAfter;

  public static final String SERIALIZED_NAME_MOVE_BEFORE = "moveBefore";
  @SerializedName(SERIALIZED_NAME_MOVE_BEFORE)
  private String moveBefore;

  public static final String SERIALIZED_NAME_NAMES = "names";
  @SerializedName(SERIALIZED_NAME_NAMES)
  private List<String> names = null;

  public static final String SERIALIZED_NAME_TO_PARENT_PATH = "toParentPath";
  @SerializedName(SERIALIZED_NAME_TO_PARENT_PATH)
  private String toParentPath;

  public MovePath() {
  }

  public MovePath fromParentPath(String fromParentPath) {
    
    this.fromParentPath = fromParentPath;
    return this;
  }

   /**
   * Get fromParentPath
   * @return fromParentPath
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFromParentPath() {
    return fromParentPath;
  }


  public void setFromParentPath(String fromParentPath) {
    this.fromParentPath = fromParentPath;
  }


  public MovePath moveAfter(String moveAfter) {
    
    this.moveAfter = moveAfter;
    return this;
  }

   /**
   * Get moveAfter
   * @return moveAfter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMoveAfter() {
    return moveAfter;
  }


  public void setMoveAfter(String moveAfter) {
    this.moveAfter = moveAfter;
  }


  public MovePath moveBefore(String moveBefore) {
    
    this.moveBefore = moveBefore;
    return this;
  }

   /**
   * Get moveBefore
   * @return moveBefore
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMoveBefore() {
    return moveBefore;
  }


  public void setMoveBefore(String moveBefore) {
    this.moveBefore = moveBefore;
  }


  public MovePath names(List<String> names) {
    
    this.names = names;
    return this;
  }

  public MovePath addNamesItem(String namesItem) {
    if (this.names == null) {
      this.names = new ArrayList<>();
    }
    this.names.add(namesItem);
    return this;
  }

   /**
   * Get names
   * @return names
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getNames() {
    return names;
  }


  public void setNames(List<String> names) {
    this.names = names;
  }


  public MovePath toParentPath(String toParentPath) {
    
    this.toParentPath = toParentPath;
    return this;
  }

   /**
   * Get toParentPath
   * @return toParentPath
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getToParentPath() {
    return toParentPath;
  }


  public void setToParentPath(String toParentPath) {
    this.toParentPath = toParentPath;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MovePath movePath = (MovePath) o;
    return Objects.equals(this.fromParentPath, movePath.fromParentPath) &&
        Objects.equals(this.moveAfter, movePath.moveAfter) &&
        Objects.equals(this.moveBefore, movePath.moveBefore) &&
        Objects.equals(this.names, movePath.names) &&
        Objects.equals(this.toParentPath, movePath.toParentPath);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fromParentPath, moveAfter, moveBefore, names, toParentPath);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MovePath {\n");
    sb.append("    fromParentPath: ").append(toIndentedString(fromParentPath)).append("\n");
    sb.append("    moveAfter: ").append(toIndentedString(moveAfter)).append("\n");
    sb.append("    moveBefore: ").append(toIndentedString(moveBefore)).append("\n");
    sb.append("    names: ").append(toIndentedString(names)).append("\n");
    sb.append("    toParentPath: ").append(toIndentedString(toParentPath)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fromParentPath");
    openapiFields.add("moveAfter");
    openapiFields.add("moveBefore");
    openapiFields.add("names");
    openapiFields.add("toParentPath");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MovePath
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (MovePath.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in MovePath is not found in the empty JSON string", MovePath.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!MovePath.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MovePath` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("fromParentPath") != null && !jsonObj.get("fromParentPath").isJsonNull()) && !jsonObj.get("fromParentPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fromParentPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fromParentPath").toString()));
      }
      if ((jsonObj.get("moveAfter") != null && !jsonObj.get("moveAfter").isJsonNull()) && !jsonObj.get("moveAfter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `moveAfter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("moveAfter").toString()));
      }
      if ((jsonObj.get("moveBefore") != null && !jsonObj.get("moveBefore").isJsonNull()) && !jsonObj.get("moveBefore").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `moveBefore` to be a primitive type in the JSON string but got `%s`", jsonObj.get("moveBefore").toString()));
      }
      // ensure the json data is an array
      if ((jsonObj.get("names") != null && !jsonObj.get("names").isJsonNull()) && !jsonObj.get("names").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `names` to be an array in the JSON string but got `%s`", jsonObj.get("names").toString()));
      }
      if ((jsonObj.get("toParentPath") != null && !jsonObj.get("toParentPath").isJsonNull()) && !jsonObj.get("toParentPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `toParentPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("toParentPath").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MovePath.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MovePath' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MovePath> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MovePath.class));

       return (TypeAdapter<T>) new TypeAdapter<MovePath>() {
           @Override
           public void write(JsonWriter out, MovePath value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MovePath read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MovePath given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MovePath
  * @throws IOException if the JSON string is invalid with respect to MovePath
  */
  public static MovePath fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MovePath.class);
  }

 /**
  * Convert an instance of MovePath to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

