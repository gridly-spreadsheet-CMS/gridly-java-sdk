/*
 * Gridly API
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 3.21.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.gridly.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.gridly.api.model.NumberFormat;
import com.gridly.api.model.Reference;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;

/**
 * CreateColumn
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CreateColumn implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  /**
   * Gets or Sets languageCode
   */
  @JsonAdapter(LanguageCodeEnum.Adapter.class)
  public enum LanguageCodeEnum {
    ENUS("enUS"),
    
    ARSA("arSA"),
    
    CAES("caES"),
    
    ZHCN("zhCN"),
    
    ZHTW("zhTW"),
    
    DEDE("deDE"),
    
    ITIT("itIT"),
    
    JAJP("jaJP"),
    
    KOKR("koKR"),
    
    PLPL("plPL"),
    
    PTBR("ptBR"),
    
    RURU("ruRU"),
    
    ESMX("esMX"),
    
    ESLA("esLA"),
    
    ESES("esES"),
    
    BNBD("bnBD"),
    
    BGBG("bgBG"),
    
    ZHHK("zhHK"),
    
    CSCZ("csCZ"),
    
    DADK("daDK"),
    
    NLNL("nlNL"),
    
    FIFI("fiFI"),
    
    FRFR("frFR"),
    
    FRCA("frCA"),
    
    ELGR("elGR"),
    
    HEIL("heIL"),
    
    HIIN("hiIN"),
    
    HUHU("huHU"),
    
    IDID("idID"),
    
    JWID("jwID"),
    
    LVLV("lvLV"),
    
    MSMY("msMY"),
    
    NONO("noNO"),
    
    PTPT("ptPT"),
    
    RORO("roRO"),
    
    SKSK("skSK"),
    
    SVSE("svSE"),
    
    TLPH("tlPH"),
    
    THTH("thTH"),
    
    TRTR("trTR"),
    
    UKUA("ukUA"),
    
    URIN("urIN"),
    
    VIVN("viVN"),
    
    AFZA("afZA"),
    
    ARAE("arAE"),
    
    ARBH("arBH"),
    
    ARDZ("arDZ"),
    
    AREG("arEG"),
    
    ARIQ("arIQ"),
    
    ARJO("arJO"),
    
    ARKW("arKW"),
    
    ARLB("arLB"),
    
    ARLY("arLY"),
    
    ARMA("arMA"),
    
    AROM("arOM"),
    
    ARQA("arQA"),
    
    ARSY("arSY"),
    
    ARTN("arTN"),
    
    ARYE("arYE"),
    
    AZAZ("azAZ"),
    
    BEBY("beBY"),
    
    BSBA("bsBA"),
    
    CYGB("cyGB"),
    
    DEAT("deAT"),
    
    DECH("deCH"),
    
    DELI("deLI"),
    
    DELU("deLU"),
    
    DVMV("dvMV"),
    
    ENAU("enAU"),
    
    ENBZ("enBZ"),
    
    ENCA("enCA"),
    
    ENGB("enGB"),
    
    ENIE("enIE"),
    
    ENJM("enJM"),
    
    ENNZ("enNZ"),
    
    ENPH("enPH"),
    
    ENTT("enTT"),
    
    ENZA("enZA"),
    
    ENZW("enZW"),
    
    ESAR("esAR"),
    
    ESBO("esBO"),
    
    ESCL("esCL"),
    
    ESCO("esCO"),
    
    ESCR("esCR"),
    
    ESDO("esDO"),
    
    ESEC("esEC"),
    
    ESGT("esGT"),
    
    ESHN("esHN"),
    
    ESNI("esNI"),
    
    ESPA("esPA"),
    
    ESPE("esPE"),
    
    ESPR("esPR"),
    
    ESPY("esPY"),
    
    ESSV("esSV"),
    
    ESUY("esUY"),
    
    ESVE("esVE"),
    
    ETEE("etEE"),
    
    EUES("euES"),
    
    FAIR("faIR"),
    
    FOFO("foFO"),
    
    FRBE("frBE"),
    
    FRCH("frCH"),
    
    FRLU("frLU"),
    
    FRMC("frMC"),
    
    GLES("glES"),
    
    GUIN("guIN"),
    
    HRBA("hrBA"),
    
    HRHR("hrHR"),
    
    HYAM("hyAM"),
    
    ISIS("isIS"),
    
    ITCH("itCH"),
    
    KAGE("kaGE"),
    
    KKKZ("kkKZ"),
    
    KNIN("knIN"),
    
    KOKIN("kokIN"),
    
    KYKG("kyKG"),
    
    LTLT("ltLT"),
    
    MINZ("miNZ"),
    
    MKMK("mkMK"),
    
    MNMN("mnMN"),
    
    MRIN("mrIN"),
    
    MSBN("msBN"),
    
    MTMT("mtMT"),
    
    NBNO("nbNO"),
    
    NLBE("nlBE"),
    
    NNNO("nnNO"),
    
    NSZA("nsZA"),
    
    PAIN("paIN"),
    
    PSAR("psAR"),
    
    QUBO("quBO"),
    
    QUEC("quEC"),
    
    QUPE("quPE"),
    
    SAIN("saIN"),
    
    SEFI("seFI"),
    
    SENO("seNO"),
    
    SESE("seSE"),
    
    SLSI("slSI"),
    
    SQAL("sqAL"),
    
    SRBA("srBA"),
    
    SVFI("svFI"),
    
    SWKE("swKE"),
    
    SYRSY("syrSY"),
    
    TAIN("taIN"),
    
    TEIN("teIN"),
    
    TNZA("tnZA"),
    
    TTRU("ttRU"),
    
    URPK("urPK"),
    
    UZUZ("uzUZ"),
    
    XHZA("xhZA"),
    
    ZHMO("zhMO"),
    
    ZHSG("zhSG"),
    
    ZUZA("zuZA");

    private String value;

    LanguageCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LanguageCodeEnum fromValue(String value) {
      for (LanguageCodeEnum b : LanguageCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LanguageCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LanguageCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LanguageCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LanguageCodeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_LANGUAGE_CODE = "languageCode";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_CODE)
  private LanguageCodeEnum languageCode;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NUMBER_FORMAT = "numberFormat";
  @SerializedName(SERIALIZED_NAME_NUMBER_FORMAT)
  private NumberFormat numberFormat;

  public static final String SERIALIZED_NAME_REFERENCE = "reference";
  @SerializedName(SERIALIZED_NAME_REFERENCE)
  private Reference reference;

  public static final String SERIALIZED_NAME_SELECTION_OPTIONS = "selectionOptions";
  @SerializedName(SERIALIZED_NAME_SELECTION_OPTIONS)
  private List<String> selectionOptions = null;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    SINGLELINE("singleLine"),
    
    MULTIPLELINES("multipleLines"),
    
    RICHTEXT("richText"),
    
    MARKDOWN("markdown"),
    
    SINGLESELECTION("singleSelection"),
    
    MULTIPLESELECTIONS("multipleSelections"),
    
    BOOLEAN("boolean"),
    
    NUMBER("number"),
    
    DATETIME("datetime"),
    
    FILES("files"),
    
    REFERENCE("reference"),
    
    LOOKUP("lookup"),
    
    LANGUAGE("language"),
    
    JSON("json"),
    
    YAML("yaml"),
    
    HTML("html"),
    
    FORMULA("formula");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;


  public CreateColumn description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public CreateColumn id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public CreateColumn languageCode(LanguageCodeEnum languageCode) {
    
    this.languageCode = languageCode;
    return this;
  }

   /**
   * Get languageCode
   * @return languageCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LanguageCodeEnum getLanguageCode() {
    return languageCode;
  }


  public void setLanguageCode(LanguageCodeEnum languageCode) {
    this.languageCode = languageCode;
  }


  public CreateColumn name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public CreateColumn numberFormat(NumberFormat numberFormat) {
    
    this.numberFormat = numberFormat;
    return this;
  }

   /**
   * Get numberFormat
   * @return numberFormat
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public NumberFormat getNumberFormat() {
    return numberFormat;
  }


  public void setNumberFormat(NumberFormat numberFormat) {
    this.numberFormat = numberFormat;
  }


  public CreateColumn reference(Reference reference) {
    
    this.reference = reference;
    return this;
  }

   /**
   * Get reference
   * @return reference
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Reference getReference() {
    return reference;
  }


  public void setReference(Reference reference) {
    this.reference = reference;
  }


  public CreateColumn selectionOptions(List<String> selectionOptions) {
    
    this.selectionOptions = selectionOptions;
    return this;
  }

  public CreateColumn addSelectionOptionsItem(String selectionOptionsItem) {
    if (this.selectionOptions == null) {
      this.selectionOptions = new ArrayList<>();
    }
    this.selectionOptions.add(selectionOptionsItem);
    return this;
  }

   /**
   * Get selectionOptions
   * @return selectionOptions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getSelectionOptions() {
    return selectionOptions;
  }


  public void setSelectionOptions(List<String> selectionOptions) {
    this.selectionOptions = selectionOptions;
  }


  public CreateColumn type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @ApiModelProperty(required = true, value = "")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateColumn createColumn = (CreateColumn) o;
    return Objects.equals(this.description, createColumn.description) &&
        Objects.equals(this.id, createColumn.id) &&
        Objects.equals(this.languageCode, createColumn.languageCode) &&
        Objects.equals(this.name, createColumn.name) &&
        Objects.equals(this.numberFormat, createColumn.numberFormat) &&
        Objects.equals(this.reference, createColumn.reference) &&
        Objects.equals(this.selectionOptions, createColumn.selectionOptions) &&
        Objects.equals(this.type, createColumn.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, id, languageCode, name, numberFormat, reference, selectionOptions, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateColumn {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    languageCode: ").append(toIndentedString(languageCode)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    numberFormat: ").append(toIndentedString(numberFormat)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    selectionOptions: ").append(toIndentedString(selectionOptions)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

