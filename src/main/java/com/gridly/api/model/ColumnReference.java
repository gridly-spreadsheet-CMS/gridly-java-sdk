/*
 * Gridly API
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 5.9.0
 * Contact: support@gridly.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.gridly.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.gridly.api.model.ReferencedColumn;
import com.gridly.api.model.ReferencedGrid;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.gridly.api.client.JSON;

/**
 * ColumnReference
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ColumnReference implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_GRID = "grid";
  @SerializedName(SERIALIZED_NAME_GRID)
  private ReferencedGrid grid;

  public static final String SERIALIZED_NAME_COLUMN = "column";
  @SerializedName(SERIALIZED_NAME_COLUMN)
  private ReferencedColumn column;

  public static final String SERIALIZED_NAME_BRANCH = "branch";
  @SerializedName(SERIALIZED_NAME_BRANCH)
  private ReferencedGrid branch;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    ROW("row"),
    
    CELL("cell");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  /**
   * Gets or Sets selectionType
   */
  @JsonAdapter(SelectionTypeEnum.Adapter.class)
  public enum SelectionTypeEnum {
    SINGLE("single"),
    
    MULTIPLE("multiple");

    private String value;

    SelectionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SelectionTypeEnum fromValue(String value) {
      for (SelectionTypeEnum b : SelectionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SelectionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SelectionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SelectionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SelectionTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SELECTION_TYPE = "selectionType";
  @SerializedName(SERIALIZED_NAME_SELECTION_TYPE)
  private SelectionTypeEnum selectionType;

  public ColumnReference() {
  }

  public ColumnReference grid(ReferencedGrid grid) {
    
    this.grid = grid;
    return this;
  }

   /**
   * Get grid
   * @return grid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ReferencedGrid getGrid() {
    return grid;
  }


  public void setGrid(ReferencedGrid grid) {
    this.grid = grid;
  }


  public ColumnReference column(ReferencedColumn column) {
    
    this.column = column;
    return this;
  }

   /**
   * Get column
   * @return column
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ReferencedColumn getColumn() {
    return column;
  }


  public void setColumn(ReferencedColumn column) {
    this.column = column;
  }


  public ColumnReference branch(ReferencedGrid branch) {
    
    this.branch = branch;
    return this;
  }

   /**
   * Get branch
   * @return branch
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ReferencedGrid getBranch() {
    return branch;
  }


  public void setBranch(ReferencedGrid branch) {
    this.branch = branch;
  }


  public ColumnReference type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  public ColumnReference selectionType(SelectionTypeEnum selectionType) {
    
    this.selectionType = selectionType;
    return this;
  }

   /**
   * Get selectionType
   * @return selectionType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SelectionTypeEnum getSelectionType() {
    return selectionType;
  }


  public void setSelectionType(SelectionTypeEnum selectionType) {
    this.selectionType = selectionType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ColumnReference columnReference = (ColumnReference) o;
    return Objects.equals(this.grid, columnReference.grid) &&
        Objects.equals(this.column, columnReference.column) &&
        Objects.equals(this.branch, columnReference.branch) &&
        Objects.equals(this.type, columnReference.type) &&
        Objects.equals(this.selectionType, columnReference.selectionType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(grid, column, branch, type, selectionType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ColumnReference {\n");
    sb.append("    grid: ").append(toIndentedString(grid)).append("\n");
    sb.append("    column: ").append(toIndentedString(column)).append("\n");
    sb.append("    branch: ").append(toIndentedString(branch)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    selectionType: ").append(toIndentedString(selectionType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("grid");
    openapiFields.add("column");
    openapiFields.add("branch");
    openapiFields.add("type");
    openapiFields.add("selectionType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ColumnReference
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ColumnReference.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ColumnReference is not found in the empty JSON string", ColumnReference.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ColumnReference.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ColumnReference` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `grid`
      if (jsonObj.get("grid") != null && !jsonObj.get("grid").isJsonNull()) {
        ReferencedGrid.validateJsonObject(jsonObj.getAsJsonObject("grid"));
      }
      // validate the optional field `column`
      if (jsonObj.get("column") != null && !jsonObj.get("column").isJsonNull()) {
        ReferencedColumn.validateJsonObject(jsonObj.getAsJsonObject("column"));
      }
      // validate the optional field `branch`
      if (jsonObj.get("branch") != null && !jsonObj.get("branch").isJsonNull()) {
        ReferencedGrid.validateJsonObject(jsonObj.getAsJsonObject("branch"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("selectionType") != null && !jsonObj.get("selectionType").isJsonNull()) && !jsonObj.get("selectionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selectionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selectionType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ColumnReference.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ColumnReference' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ColumnReference> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ColumnReference.class));

       return (TypeAdapter<T>) new TypeAdapter<ColumnReference>() {
           @Override
           public void write(JsonWriter out, ColumnReference value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ColumnReference read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ColumnReference given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ColumnReference
  * @throws IOException if the JSON string is invalid with respect to ColumnReference
  */
  public static ColumnReference fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ColumnReference.class);
  }

 /**
  * Convert an instance of ColumnReference to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

