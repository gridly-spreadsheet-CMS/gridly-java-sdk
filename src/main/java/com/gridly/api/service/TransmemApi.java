/*
 * Gridly API
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 4.21.5
 * Contact: support@gridly.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.gridly.api.service;

import com.gridly.api.client.ApiCallback;
import com.gridly.api.client.ApiClient;
import com.gridly.api.client.ApiException;
import com.gridly.api.client.ApiResponse;
import com.gridly.api.client.Configuration;
import com.gridly.api.client.Pair;
import com.gridly.api.client.ProgressRequestBody;
import com.gridly.api.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.gridly.api.model.CreateTransMem;
import com.gridly.api.model.ExportFormat;
import java.io.File;
import com.gridly.api.model.TransMem;
import com.gridly.api.model.UpdateTransMem;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TransmemApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TransmemApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TransmemApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for cleanup
     * @param tmId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cleanupCall(String tmId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/transmems/{tmId}/cleanup"
            .replaceAll("\\{" + "tmId" + "\\}", localVarApiClient.escapeString(tmId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cleanupValidateBeforeCall(String tmId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tmId' is set
        if (tmId == null) {
            throw new ApiException("Missing the required parameter 'tmId' when calling cleanup(Async)");
        }
        

        okhttp3.Call localVarCall = cleanupCall(tmId, _callback);
        return localVarCall;

    }

    /**
     * Erases all the translation data of the provided tmId
     * 
     * @param tmId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void cleanup(String tmId) throws ApiException {
        cleanupWithHttpInfo(tmId);
    }

    /**
     * Erases all the translation data of the provided tmId
     * 
     * @param tmId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> cleanupWithHttpInfo(String tmId) throws ApiException {
        okhttp3.Call localVarCall = cleanupValidateBeforeCall(tmId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Erases all the translation data of the provided tmId (asynchronously)
     * 
     * @param tmId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cleanupAsync(String tmId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cleanupValidateBeforeCall(tmId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for create
     * @param createTransMem  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a new translation memory successful ! </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCall(CreateTransMem createTransMem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTransMem;

        // create path and map variables
        String localVarPath = "/v1/transmems";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createValidateBeforeCall(CreateTransMem createTransMem, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = createCall(createTransMem, _callback);
        return localVarCall;

    }

    /**
     * Create a new translation memory
     * 
     * @param createTransMem  (optional)
     * @return TransMem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a new translation memory successful ! </td><td>  -  </td></tr>
     </table>
     */
    public TransMem create(CreateTransMem createTransMem) throws ApiException {
        ApiResponse<TransMem> localVarResp = createWithHttpInfo(createTransMem);
        return localVarResp.getData();
    }

    /**
     * Create a new translation memory
     * 
     * @param createTransMem  (optional)
     * @return ApiResponse&lt;TransMem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a new translation memory successful ! </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransMem> createWithHttpInfo(CreateTransMem createTransMem) throws ApiException {
        okhttp3.Call localVarCall = createValidateBeforeCall(createTransMem, null);
        Type localVarReturnType = new TypeToken<TransMem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new translation memory (asynchronously)
     * 
     * @param createTransMem  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a new translation memory successful ! </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAsync(CreateTransMem createTransMem, final ApiCallback<TransMem> _callback) throws ApiException {

        okhttp3.Call localVarCall = createValidateBeforeCall(createTransMem, _callback);
        Type localVarReturnType = new TypeToken<TransMem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createWithFile
     * @param _file  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a new translation memory based on provided tmx file successfully ! </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createWithFileCall(File _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/transmems/upload";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createWithFileValidateBeforeCall(File _file, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling createWithFile(Async)");
        }
        

        okhttp3.Call localVarCall = createWithFileCall(_file, _callback);
        return localVarCall;

    }

    /**
     * Create a new translation memory by uploading tmx file
     * 
     * @param _file  (required)
     * @return TransMem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a new translation memory based on provided tmx file successfully ! </td><td>  -  </td></tr>
     </table>
     */
    public TransMem createWithFile(File _file) throws ApiException {
        ApiResponse<TransMem> localVarResp = createWithFileWithHttpInfo(_file);
        return localVarResp.getData();
    }

    /**
     * Create a new translation memory by uploading tmx file
     * 
     * @param _file  (required)
     * @return ApiResponse&lt;TransMem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a new translation memory based on provided tmx file successfully ! </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransMem> createWithFileWithHttpInfo(File _file) throws ApiException {
        okhttp3.Call localVarCall = createWithFileValidateBeforeCall(_file, null);
        Type localVarReturnType = new TypeToken<TransMem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new translation memory by uploading tmx file (asynchronously)
     * 
     * @param _file  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a new translation memory based on provided tmx file successfully ! </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createWithFileAsync(File _file, final ApiCallback<TransMem> _callback) throws ApiException {

        okhttp3.Call localVarCall = createWithFileValidateBeforeCall(_file, _callback);
        Type localVarReturnType = new TypeToken<TransMem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for delete
     * @param tmId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCall(String tmId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/transmems/{tmId}"
            .replaceAll("\\{" + "tmId" + "\\}", localVarApiClient.escapeString(tmId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteValidateBeforeCall(String tmId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tmId' is set
        if (tmId == null) {
            throw new ApiException("Missing the required parameter 'tmId' when calling delete(Async)");
        }
        

        okhttp3.Call localVarCall = deleteCall(tmId, _callback);
        return localVarCall;

    }

    /**
     * Delete a translation memory by id
     * 
     * @param tmId  (required)
     * @return TransMem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TransMem delete(String tmId) throws ApiException {
        ApiResponse<TransMem> localVarResp = deleteWithHttpInfo(tmId);
        return localVarResp.getData();
    }

    /**
     * Delete a translation memory by id
     * 
     * @param tmId  (required)
     * @return ApiResponse&lt;TransMem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransMem> deleteWithHttpInfo(String tmId) throws ApiException {
        okhttp3.Call localVarCall = deleteValidateBeforeCall(tmId, null);
        Type localVarReturnType = new TypeToken<TransMem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a translation memory by id (asynchronously)
     * 
     * @param tmId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAsync(String tmId, final ApiCallback<TransMem> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteValidateBeforeCall(tmId, _callback);
        Type localVarReturnType = new TypeToken<TransMem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for export
     * @param tmId  (required)
     * @param format  (optional)
     * @param sourceLang  (optional)
     * @param targetLangs  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportCall(String tmId, ExportFormat format, String sourceLang, List<String> targetLangs, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/transmems/{tmId}/export"
            .replaceAll("\\{" + "tmId" + "\\}", localVarApiClient.escapeString(tmId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (sourceLang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sourceLang", sourceLang));
        }

        if (targetLangs != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "targetLangs", targetLangs));
        }

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportValidateBeforeCall(String tmId, ExportFormat format, String sourceLang, List<String> targetLangs, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tmId' is set
        if (tmId == null) {
            throw new ApiException("Missing the required parameter 'tmId' when calling export(Async)");
        }
        

        okhttp3.Call localVarCall = exportCall(tmId, format, sourceLang, targetLangs, _callback);
        return localVarCall;

    }

    /**
     * Export translation memory tmx file
     * 
     * @param tmId  (required)
     * @param format  (optional)
     * @param sourceLang  (optional)
     * @param targetLangs  (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public File export(String tmId, ExportFormat format, String sourceLang, List<String> targetLangs) throws ApiException {
        ApiResponse<File> localVarResp = exportWithHttpInfo(tmId, format, sourceLang, targetLangs);
        return localVarResp.getData();
    }

    /**
     * Export translation memory tmx file
     * 
     * @param tmId  (required)
     * @param format  (optional)
     * @param sourceLang  (optional)
     * @param targetLangs  (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> exportWithHttpInfo(String tmId, ExportFormat format, String sourceLang, List<String> targetLangs) throws ApiException {
        okhttp3.Call localVarCall = exportValidateBeforeCall(tmId, format, sourceLang, targetLangs, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Export translation memory tmx file (asynchronously)
     * 
     * @param tmId  (required)
     * @param format  (optional)
     * @param sourceLang  (optional)
     * @param targetLangs  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportAsync(String tmId, ExportFormat format, String sourceLang, List<String> targetLangs, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportValidateBeforeCall(tmId, format, sourceLang, targetLangs, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for get
     * @param tmId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCall(String tmId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/transmems/{tmId}"
            .replaceAll("\\{" + "tmId" + "\\}", localVarApiClient.escapeString(tmId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getValidateBeforeCall(String tmId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tmId' is set
        if (tmId == null) {
            throw new ApiException("Missing the required parameter 'tmId' when calling get(Async)");
        }
        

        okhttp3.Call localVarCall = getCall(tmId, _callback);
        return localVarCall;

    }

    /**
     * Get translation memory info by id
     * 
     * @param tmId  (required)
     * @return TransMem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TransMem get(String tmId) throws ApiException {
        ApiResponse<TransMem> localVarResp = getWithHttpInfo(tmId);
        return localVarResp.getData();
    }

    /**
     * Get translation memory info by id
     * 
     * @param tmId  (required)
     * @return ApiResponse&lt;TransMem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransMem> getWithHttpInfo(String tmId) throws ApiException {
        okhttp3.Call localVarCall = getValidateBeforeCall(tmId, null);
        Type localVarReturnType = new TypeToken<TransMem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get translation memory info by id (asynchronously)
     * 
     * @param tmId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAsync(String tmId, final ApiCallback<TransMem> _callback) throws ApiException {

        okhttp3.Call localVarCall = getValidateBeforeCall(tmId, _callback);
        Type localVarReturnType = new TypeToken<TransMem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for importTmx
     * @param tmId  (required)
     * @param _file  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Import tmx file successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importTmxCall(String tmId, File _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/transmems/{tmId}/import"
            .replaceAll("\\{" + "tmId" + "\\}", localVarApiClient.escapeString(tmId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importTmxValidateBeforeCall(String tmId, File _file, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tmId' is set
        if (tmId == null) {
            throw new ApiException("Missing the required parameter 'tmId' when calling importTmx(Async)");
        }
        
        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling importTmx(Async)");
        }
        

        okhttp3.Call localVarCall = importTmxCall(tmId, _file, _callback);
        return localVarCall;

    }

    /**
     * Import a translation memory from tmx file
     * 
     * @param tmId  (required)
     * @param _file  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Import tmx file successfully </td><td>  -  </td></tr>
     </table>
     */
    public void importTmx(String tmId, File _file) throws ApiException {
        importTmxWithHttpInfo(tmId, _file);
    }

    /**
     * Import a translation memory from tmx file
     * 
     * @param tmId  (required)
     * @param _file  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Import tmx file successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> importTmxWithHttpInfo(String tmId, File _file) throws ApiException {
        okhttp3.Call localVarCall = importTmxValidateBeforeCall(tmId, _file, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Import a translation memory from tmx file (asynchronously)
     * 
     * @param tmId  (required)
     * @param _file  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Import tmx file successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importTmxAsync(String tmId, File _file, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = importTmxValidateBeforeCall(tmId, _file, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTM
     * @param projectId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTMCall(Long projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/transmems";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (projectId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectId", projectId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTMValidateBeforeCall(Long projectId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listTMCall(projectId, _callback);
        return localVarCall;

    }

    /**
     * List all available translation memories or create default one if there is no translation memory
     * 
     * @param projectId  (optional)
     * @return List&lt;TransMem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<TransMem> listTM(Long projectId) throws ApiException {
        ApiResponse<List<TransMem>> localVarResp = listTMWithHttpInfo(projectId);
        return localVarResp.getData();
    }

    /**
     * List all available translation memories or create default one if there is no translation memory
     * 
     * @param projectId  (optional)
     * @return ApiResponse&lt;List&lt;TransMem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TransMem>> listTMWithHttpInfo(Long projectId) throws ApiException {
        okhttp3.Call localVarCall = listTMValidateBeforeCall(projectId, null);
        Type localVarReturnType = new TypeToken<List<TransMem>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all available translation memories or create default one if there is no translation memory (asynchronously)
     * 
     * @param projectId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTMAsync(Long projectId, final ApiCallback<List<TransMem>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTMValidateBeforeCall(projectId, _callback);
        Type localVarReturnType = new TypeToken<List<TransMem>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for update
     * @param tmId  (required)
     * @param updateTransMem  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCall(String tmId, UpdateTransMem updateTransMem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateTransMem;

        // create path and map variables
        String localVarPath = "/v1/transmems/{tmId}"
            .replaceAll("\\{" + "tmId" + "\\}", localVarApiClient.escapeString(tmId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateValidateBeforeCall(String tmId, UpdateTransMem updateTransMem, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tmId' is set
        if (tmId == null) {
            throw new ApiException("Missing the required parameter 'tmId' when calling update(Async)");
        }
        

        okhttp3.Call localVarCall = updateCall(tmId, updateTransMem, _callback);
        return localVarCall;

    }

    /**
     * Update a translation memory
     * 
     * @param tmId  (required)
     * @param updateTransMem  (optional)
     * @return TransMem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TransMem update(String tmId, UpdateTransMem updateTransMem) throws ApiException {
        ApiResponse<TransMem> localVarResp = updateWithHttpInfo(tmId, updateTransMem);
        return localVarResp.getData();
    }

    /**
     * Update a translation memory
     * 
     * @param tmId  (required)
     * @param updateTransMem  (optional)
     * @return ApiResponse&lt;TransMem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransMem> updateWithHttpInfo(String tmId, UpdateTransMem updateTransMem) throws ApiException {
        okhttp3.Call localVarCall = updateValidateBeforeCall(tmId, updateTransMem, null);
        Type localVarReturnType = new TypeToken<TransMem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a translation memory (asynchronously)
     * 
     * @param tmId  (required)
     * @param updateTransMem  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAsync(String tmId, UpdateTransMem updateTransMem, final ApiCallback<TransMem> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateValidateBeforeCall(tmId, updateTransMem, _callback);
        Type localVarReturnType = new TypeToken<TransMem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
