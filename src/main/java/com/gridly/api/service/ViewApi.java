/*
 * Gridly API
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 4.29.1
 * Contact: support@gridly.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.gridly.api.service;

import com.gridly.api.client.ApiCallback;
import com.gridly.api.client.ApiClient;
import com.gridly.api.client.ApiException;
import com.gridly.api.client.ApiResponse;
import com.gridly.api.client.Configuration;
import com.gridly.api.client.Pair;
import com.gridly.api.client.ProgressRequestBody;
import com.gridly.api.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.gridly.api.model.CreateView;
import com.gridly.api.model.ExportFileHeader;
import java.io.File;
import com.gridly.api.model.MergeBranchRequest;
import com.gridly.api.model.Task;
import com.gridly.api.model.View;
import com.gridly.api.model.ViewStatistic;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ViewApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ViewApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ViewApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for callList
     * @param branchId branchId (optional)
     * @param gridId gridId (optional)
     * @param type type (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callListCall(String branchId, String gridId, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/views";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (branchId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("branchId", branchId));
        }

        if (gridId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gridId", gridId));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call callListValidateBeforeCall(String branchId, String gridId, String type, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = callListCall(branchId, gridId, type, _callback);
        return localVarCall;

    }

    /**
     * list
     * list
     * @param branchId branchId (optional)
     * @param gridId gridId (optional)
     * @param type type (optional)
     * @return List&lt;View&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<View> callList(String branchId, String gridId, String type) throws ApiException {
        ApiResponse<List<View>> localVarResp = callListWithHttpInfo(branchId, gridId, type);
        return localVarResp.getData();
    }

    /**
     * list
     * list
     * @param branchId branchId (optional)
     * @param gridId gridId (optional)
     * @param type type (optional)
     * @return ApiResponse&lt;List&lt;View&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<View>> callListWithHttpInfo(String branchId, String gridId, String type) throws ApiException {
        okhttp3.Call localVarCall = callListValidateBeforeCall(branchId, gridId, type, null);
        Type localVarReturnType = new TypeToken<List<View>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * list (asynchronously)
     * list
     * @param branchId branchId (optional)
     * @param gridId gridId (optional)
     * @param type type (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callListAsync(String branchId, String gridId, String type, final ApiCallback<List<View>> _callback) throws ApiException {

        okhttp3.Call localVarCall = callListValidateBeforeCall(branchId, gridId, type, _callback);
        Type localVarReturnType = new TypeToken<List<View>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for create
     * @param createView  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCall(CreateView createView, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createView;

        // create path and map variables
        String localVarPath = "/v1/views";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createValidateBeforeCall(CreateView createView, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'createView' is set
        if (createView == null) {
            throw new ApiException("Missing the required parameter 'createView' when calling create(Async)");
        }
        

        okhttp3.Call localVarCall = createCall(createView, _callback);
        return localVarCall;

    }

    /**
     * create
     * create
     * @param createView  (required)
     * @return View
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public View create(CreateView createView) throws ApiException {
        ApiResponse<View> localVarResp = createWithHttpInfo(createView);
        return localVarResp.getData();
    }

    /**
     * create
     * create
     * @param createView  (required)
     * @return ApiResponse&lt;View&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<View> createWithHttpInfo(CreateView createView) throws ApiException {
        okhttp3.Call localVarCall = createValidateBeforeCall(createView, null);
        Type localVarReturnType = new TypeToken<View>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * create (asynchronously)
     * create
     * @param createView  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAsync(CreateView createView, final ApiCallback<View> _callback) throws ApiException {

        okhttp3.Call localVarCall = createValidateBeforeCall(createView, _callback);
        Type localVarReturnType = new TypeToken<View>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for export
     * @param viewId viewId (required)
     * @param columnIds columnIds (optional)
     * @param fileHeader fileHeader (optional)
     * @param query query (optional, default to {})
     * @param sort sort (optional, default to {})
     * @param type type (optional, default to csv)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportCall(String viewId, List<String> columnIds, ExportFileHeader fileHeader, String query, String sort, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/views/{viewId}/export"
            .replaceAll("\\{" + "viewId" + "\\}", localVarApiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (columnIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "columnIds", columnIds));
        }

        if (fileHeader != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fileHeader", fileHeader));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportValidateBeforeCall(String viewId, List<String> columnIds, ExportFileHeader fileHeader, String query, String sort, String type, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling export(Async)");
        }
        

        okhttp3.Call localVarCall = exportCall(viewId, columnIds, fileHeader, query, sort, type, _callback);
        return localVarCall;

    }

    /**
     * export
     * export
     * @param viewId viewId (required)
     * @param columnIds columnIds (optional)
     * @param fileHeader fileHeader (optional)
     * @param query query (optional, default to {})
     * @param sort sort (optional, default to {})
     * @param type type (optional, default to csv)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public File export(String viewId, List<String> columnIds, ExportFileHeader fileHeader, String query, String sort, String type) throws ApiException {
        ApiResponse<File> localVarResp = exportWithHttpInfo(viewId, columnIds, fileHeader, query, sort, type);
        return localVarResp.getData();
    }

    /**
     * export
     * export
     * @param viewId viewId (required)
     * @param columnIds columnIds (optional)
     * @param fileHeader fileHeader (optional)
     * @param query query (optional, default to {})
     * @param sort sort (optional, default to {})
     * @param type type (optional, default to csv)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> exportWithHttpInfo(String viewId, List<String> columnIds, ExportFileHeader fileHeader, String query, String sort, String type) throws ApiException {
        okhttp3.Call localVarCall = exportValidateBeforeCall(viewId, columnIds, fileHeader, query, sort, type, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * export (asynchronously)
     * export
     * @param viewId viewId (required)
     * @param columnIds columnIds (optional)
     * @param fileHeader fileHeader (optional)
     * @param query query (optional, default to {})
     * @param sort sort (optional, default to {})
     * @param type type (optional, default to csv)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportAsync(String viewId, List<String> columnIds, ExportFileHeader fileHeader, String query, String sort, String type, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportValidateBeforeCall(viewId, columnIds, fileHeader, query, sort, type, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for get
     * @param viewId viewId (required)
     * @param columnIds columnIds (optional)
     * @param include include (optional)
     * @param page page (optional, default to {})
     * @param query query (optional, default to {})
     * @param sort sort (optional, default to {})
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCall(String viewId, List<String> columnIds, List<String> include, String page, String query, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/views/{viewId}"
            .replaceAll("\\{" + "viewId" + "\\}", localVarApiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (columnIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "columnIds", columnIds));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getValidateBeforeCall(String viewId, List<String> columnIds, List<String> include, String page, String query, String sort, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling get(Async)");
        }
        

        okhttp3.Call localVarCall = getCall(viewId, columnIds, include, page, query, sort, _callback);
        return localVarCall;

    }

    /**
     * get
     * get
     * @param viewId viewId (required)
     * @param columnIds columnIds (optional)
     * @param include include (optional)
     * @param page page (optional, default to {})
     * @param query query (optional, default to {})
     * @param sort sort (optional, default to {})
     * @return View
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public View get(String viewId, List<String> columnIds, List<String> include, String page, String query, String sort) throws ApiException {
        ApiResponse<View> localVarResp = getWithHttpInfo(viewId, columnIds, include, page, query, sort);
        return localVarResp.getData();
    }

    /**
     * get
     * get
     * @param viewId viewId (required)
     * @param columnIds columnIds (optional)
     * @param include include (optional)
     * @param page page (optional, default to {})
     * @param query query (optional, default to {})
     * @param sort sort (optional, default to {})
     * @return ApiResponse&lt;View&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<View> getWithHttpInfo(String viewId, List<String> columnIds, List<String> include, String page, String query, String sort) throws ApiException {
        okhttp3.Call localVarCall = getValidateBeforeCall(viewId, columnIds, include, page, query, sort, null);
        Type localVarReturnType = new TypeToken<View>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get (asynchronously)
     * get
     * @param viewId viewId (required)
     * @param columnIds columnIds (optional)
     * @param include include (optional)
     * @param page page (optional, default to {})
     * @param query query (optional, default to {})
     * @param sort sort (optional, default to {})
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAsync(String viewId, List<String> columnIds, List<String> include, String page, String query, String sort, final ApiCallback<View> _callback) throws ApiException {

        okhttp3.Call localVarCall = getValidateBeforeCall(viewId, columnIds, include, page, query, sort, _callback);
        Type localVarReturnType = new TypeToken<View>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStatistic
     * @param viewId viewId (required)
     * @param columnIds columnIds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStatisticCall(String viewId, List<String> columnIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/views/{viewId}/statistic"
            .replaceAll("\\{" + "viewId" + "\\}", localVarApiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (columnIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "columnIds", columnIds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStatisticValidateBeforeCall(String viewId, List<String> columnIds, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling getStatistic(Async)");
        }
        

        okhttp3.Call localVarCall = getStatisticCall(viewId, columnIds, _callback);
        return localVarCall;

    }

    /**
     * getStatistic
     * getStatistic
     * @param viewId viewId (required)
     * @param columnIds columnIds (optional)
     * @return ViewStatistic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ViewStatistic getStatistic(String viewId, List<String> columnIds) throws ApiException {
        ApiResponse<ViewStatistic> localVarResp = getStatisticWithHttpInfo(viewId, columnIds);
        return localVarResp.getData();
    }

    /**
     * getStatistic
     * getStatistic
     * @param viewId viewId (required)
     * @param columnIds columnIds (optional)
     * @return ApiResponse&lt;ViewStatistic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ViewStatistic> getStatisticWithHttpInfo(String viewId, List<String> columnIds) throws ApiException {
        okhttp3.Call localVarCall = getStatisticValidateBeforeCall(viewId, columnIds, null);
        Type localVarReturnType = new TypeToken<ViewStatistic>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * getStatistic (asynchronously)
     * getStatistic
     * @param viewId viewId (required)
     * @param columnIds columnIds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStatisticAsync(String viewId, List<String> columnIds, final ApiCallback<ViewStatistic> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStatisticValidateBeforeCall(viewId, columnIds, _callback);
        Type localVarReturnType = new TypeToken<ViewStatistic>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for importView
     * @param viewId viewId (required)
     * @param _file The following file types are supported: csv, tsv, xls, xlsx and json (required)
     * @param importRequest importRequest (optional, default to {})
     * @param type type (optional, default to csv)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importViewCall(String viewId, File _file, String importRequest, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/views/{viewId}/import"
            .replaceAll("\\{" + "viewId" + "\\}", localVarApiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (importRequest != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("importRequest", importRequest));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importViewValidateBeforeCall(String viewId, File _file, String importRequest, String type, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling importView(Async)");
        }
        
        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling importView(Async)");
        }
        

        okhttp3.Call localVarCall = importViewCall(viewId, _file, importRequest, type, _callback);
        return localVarCall;

    }

    /**
     * importView
     * importView
     * @param viewId viewId (required)
     * @param _file The following file types are supported: csv, tsv, xls, xlsx and json (required)
     * @param importRequest importRequest (optional, default to {})
     * @param type type (optional, default to csv)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public void importView(String viewId, File _file, String importRequest, String type) throws ApiException {
        importViewWithHttpInfo(viewId, _file, importRequest, type);
    }

    /**
     * importView
     * importView
     * @param viewId viewId (required)
     * @param _file The following file types are supported: csv, tsv, xls, xlsx and json (required)
     * @param importRequest importRequest (optional, default to {})
     * @param type type (optional, default to csv)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> importViewWithHttpInfo(String viewId, File _file, String importRequest, String type) throws ApiException {
        okhttp3.Call localVarCall = importViewValidateBeforeCall(viewId, _file, importRequest, type, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * importView (asynchronously)
     * importView
     * @param viewId viewId (required)
     * @param _file The following file types are supported: csv, tsv, xls, xlsx and json (required)
     * @param importRequest importRequest (optional, default to {})
     * @param type type (optional, default to csv)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importViewAsync(String viewId, File _file, String importRequest, String type, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = importViewValidateBeforeCall(viewId, _file, importRequest, type, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for merge
     * @param destinationViewId destinationViewId (required)
     * @param viewId viewId (required)
     * @param mergeBranchRequest  (required)
     * @param mergeRecordOptions mergeRecordOptions (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mergeCall(String destinationViewId, String viewId, MergeBranchRequest mergeBranchRequest, List<String> mergeRecordOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = mergeBranchRequest;

        // create path and map variables
        String localVarPath = "/v1/views/{viewId}/merge"
            .replaceAll("\\{" + "viewId" + "\\}", localVarApiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (destinationViewId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("destinationViewId", destinationViewId));
        }

        if (mergeRecordOptions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "mergeRecordOptions", mergeRecordOptions));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mergeValidateBeforeCall(String destinationViewId, String viewId, MergeBranchRequest mergeBranchRequest, List<String> mergeRecordOptions, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'destinationViewId' is set
        if (destinationViewId == null) {
            throw new ApiException("Missing the required parameter 'destinationViewId' when calling merge(Async)");
        }
        
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling merge(Async)");
        }
        
        // verify the required parameter 'mergeBranchRequest' is set
        if (mergeBranchRequest == null) {
            throw new ApiException("Missing the required parameter 'mergeBranchRequest' when calling merge(Async)");
        }
        

        okhttp3.Call localVarCall = mergeCall(destinationViewId, viewId, mergeBranchRequest, mergeRecordOptions, _callback);
        return localVarCall;

    }

    /**
     * merge
     * merge
     * @param destinationViewId destinationViewId (required)
     * @param viewId viewId (required)
     * @param mergeBranchRequest  (required)
     * @param mergeRecordOptions mergeRecordOptions (optional)
     * @return Task
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public Task merge(String destinationViewId, String viewId, MergeBranchRequest mergeBranchRequest, List<String> mergeRecordOptions) throws ApiException {
        ApiResponse<Task> localVarResp = mergeWithHttpInfo(destinationViewId, viewId, mergeBranchRequest, mergeRecordOptions);
        return localVarResp.getData();
    }

    /**
     * merge
     * merge
     * @param destinationViewId destinationViewId (required)
     * @param viewId viewId (required)
     * @param mergeBranchRequest  (required)
     * @param mergeRecordOptions mergeRecordOptions (optional)
     * @return ApiResponse&lt;Task&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Task> mergeWithHttpInfo(String destinationViewId, String viewId, MergeBranchRequest mergeBranchRequest, List<String> mergeRecordOptions) throws ApiException {
        okhttp3.Call localVarCall = mergeValidateBeforeCall(destinationViewId, viewId, mergeBranchRequest, mergeRecordOptions, null);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * merge (asynchronously)
     * merge
     * @param destinationViewId destinationViewId (required)
     * @param viewId viewId (required)
     * @param mergeBranchRequest  (required)
     * @param mergeRecordOptions mergeRecordOptions (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mergeAsync(String destinationViewId, String viewId, MergeBranchRequest mergeBranchRequest, List<String> mergeRecordOptions, final ApiCallback<Task> _callback) throws ApiException {

        okhttp3.Call localVarCall = mergeValidateBeforeCall(destinationViewId, viewId, mergeBranchRequest, mergeRecordOptions, _callback);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
