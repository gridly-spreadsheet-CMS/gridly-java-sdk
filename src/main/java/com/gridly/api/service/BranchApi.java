/*
 * Gridly API
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 5.9.0
 * Contact: support@gridly.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.gridly.api.service;

import com.gridly.api.client.ApiCallback;
import com.gridly.api.client.ApiClient;
import com.gridly.api.client.ApiException;
import com.gridly.api.client.ApiResponse;
import com.gridly.api.client.Configuration;
import com.gridly.api.client.Pair;
import com.gridly.api.client.ProgressRequestBody;
import com.gridly.api.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.gridly.api.model.Branch;
import com.gridly.api.model.BranchDiffRecord;
import com.gridly.api.model.CreateBranch;
import com.gridly.api.model.MergeBranchRequest;
import com.gridly.api.model.Task;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class BranchApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BranchApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BranchApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for callList
     * @param gridId gridId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callListCall(String gridId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/branches";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (gridId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gridId", gridId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call callListValidateBeforeCall(String gridId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gridId' is set
        if (gridId == null) {
            throw new ApiException("Missing the required parameter 'gridId' when calling callList(Async)");
        }

        return callListCall(gridId, _callback);

    }

    /**
     * list
     * list
     * @param gridId gridId (required)
     * @return List&lt;Branch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<Branch> callList(String gridId) throws ApiException {
        ApiResponse<List<Branch>> localVarResp = callListWithHttpInfo(gridId);
        return localVarResp.getData();
    }

    /**
     * list
     * list
     * @param gridId gridId (required)
     * @return ApiResponse&lt;List&lt;Branch&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Branch>> callListWithHttpInfo(String gridId) throws ApiException {
        okhttp3.Call localVarCall = callListValidateBeforeCall(gridId, null);
        Type localVarReturnType = new TypeToken<List<Branch>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * list (asynchronously)
     * list
     * @param gridId gridId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callListAsync(String gridId, final ApiCallback<List<Branch>> _callback) throws ApiException {

        okhttp3.Call localVarCall = callListValidateBeforeCall(gridId, _callback);
        Type localVarReturnType = new TypeToken<List<Branch>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for create
     * @param createBranch  (required)
     * @param gridId gridId (optional)
     * @param branchId branchId (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCall(CreateBranch createBranch, String gridId, String branchId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createBranch;

        // create path and map variables
        String localVarPath = "/v1/branches";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (gridId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gridId", gridId));
        }

        if (branchId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("branchId", branchId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createValidateBeforeCall(CreateBranch createBranch, String gridId, String branchId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createBranch' is set
        if (createBranch == null) {
            throw new ApiException("Missing the required parameter 'createBranch' when calling create(Async)");
        }

        return createCall(createBranch, gridId, branchId, _callback);

    }

    /**
     * create
     * create
     * @param createBranch  (required)
     * @param gridId gridId (optional)
     * @param branchId branchId (optional)
     * @return Branch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public Branch create(CreateBranch createBranch, String gridId, String branchId) throws ApiException {
        ApiResponse<Branch> localVarResp = createWithHttpInfo(createBranch, gridId, branchId);
        return localVarResp.getData();
    }

    /**
     * create
     * create
     * @param createBranch  (required)
     * @param gridId gridId (optional)
     * @param branchId branchId (optional)
     * @return ApiResponse&lt;Branch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Branch> createWithHttpInfo(CreateBranch createBranch, String gridId, String branchId) throws ApiException {
        okhttp3.Call localVarCall = createValidateBeforeCall(createBranch, gridId, branchId, null);
        Type localVarReturnType = new TypeToken<Branch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * create (asynchronously)
     * create
     * @param createBranch  (required)
     * @param gridId gridId (optional)
     * @param branchId branchId (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAsync(CreateBranch createBranch, String gridId, String branchId, final ApiCallback<Branch> _callback) throws ApiException {

        okhttp3.Call localVarCall = createValidateBeforeCall(createBranch, gridId, branchId, _callback);
        Type localVarReturnType = new TypeToken<Branch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDiffCheck
     * @param sourceViewId sourceViewId (required)
     * @param destinationViewId destinationViewId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDiffCheckCall(String sourceViewId, String destinationViewId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/branches/diffcheck";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sourceViewId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sourceViewId", sourceViewId));
        }

        if (destinationViewId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("destinationViewId", destinationViewId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDiffCheckValidateBeforeCall(String sourceViewId, String destinationViewId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceViewId' is set
        if (sourceViewId == null) {
            throw new ApiException("Missing the required parameter 'sourceViewId' when calling createDiffCheck(Async)");
        }

        // verify the required parameter 'destinationViewId' is set
        if (destinationViewId == null) {
            throw new ApiException("Missing the required parameter 'destinationViewId' when calling createDiffCheck(Async)");
        }

        return createDiffCheckCall(sourceViewId, destinationViewId, _callback);

    }

    /**
     * createDiffCheck
     * createDiffCheck
     * @param sourceViewId sourceViewId (required)
     * @param destinationViewId destinationViewId (required)
     * @return Task
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public Task createDiffCheck(String sourceViewId, String destinationViewId) throws ApiException {
        ApiResponse<Task> localVarResp = createDiffCheckWithHttpInfo(sourceViewId, destinationViewId);
        return localVarResp.getData();
    }

    /**
     * createDiffCheck
     * createDiffCheck
     * @param sourceViewId sourceViewId (required)
     * @param destinationViewId destinationViewId (required)
     * @return ApiResponse&lt;Task&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Task> createDiffCheckWithHttpInfo(String sourceViewId, String destinationViewId) throws ApiException {
        okhttp3.Call localVarCall = createDiffCheckValidateBeforeCall(sourceViewId, destinationViewId, null);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * createDiffCheck (asynchronously)
     * createDiffCheck
     * @param sourceViewId sourceViewId (required)
     * @param destinationViewId destinationViewId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDiffCheckAsync(String sourceViewId, String destinationViewId, final ApiCallback<Task> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDiffCheckValidateBeforeCall(sourceViewId, destinationViewId, _callback);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for delete
     * @param branchId branchId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCall(String branchId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/branches/{branchId}"
            .replace("{" + "branchId" + "}", localVarApiClient.escapeString(branchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteValidateBeforeCall(String branchId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'branchId' is set
        if (branchId == null) {
            throw new ApiException("Missing the required parameter 'branchId' when calling delete(Async)");
        }

        return deleteCall(branchId, _callback);

    }

    /**
     * delete
     * delete
     * @param branchId branchId (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void delete(String branchId) throws ApiException {
        deleteWithHttpInfo(branchId);
    }

    /**
     * delete
     * delete
     * @param branchId branchId (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteWithHttpInfo(String branchId) throws ApiException {
        okhttp3.Call localVarCall = deleteValidateBeforeCall(branchId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * delete (asynchronously)
     * delete
     * @param branchId branchId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAsync(String branchId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteValidateBeforeCall(branchId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for get
     * @param branchId branchId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCall(String branchId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/branches/{branchId}"
            .replace("{" + "branchId" + "}", localVarApiClient.escapeString(branchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getValidateBeforeCall(String branchId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'branchId' is set
        if (branchId == null) {
            throw new ApiException("Missing the required parameter 'branchId' when calling get(Async)");
        }

        return getCall(branchId, _callback);

    }

    /**
     * get
     * get
     * @param branchId branchId (required)
     * @return Branch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Branch get(String branchId) throws ApiException {
        ApiResponse<Branch> localVarResp = getWithHttpInfo(branchId);
        return localVarResp.getData();
    }

    /**
     * get
     * get
     * @param branchId branchId (required)
     * @return ApiResponse&lt;Branch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Branch> getWithHttpInfo(String branchId) throws ApiException {
        okhttp3.Call localVarCall = getValidateBeforeCall(branchId, null);
        Type localVarReturnType = new TypeToken<Branch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get (asynchronously)
     * get
     * @param branchId branchId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAsync(String branchId, final ApiCallback<Branch> _callback) throws ApiException {

        okhttp3.Call localVarCall = getValidateBeforeCall(branchId, _callback);
        Type localVarReturnType = new TypeToken<Branch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDiffCheck
     * @param taskId taskId (required)
     * @param mergeRecordOptions mergeRecordOptions (optional)
     * @param query query (optional, default to {})
     * @param page page (optional, default to {})
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDiffCheckCall(String taskId, List<String> mergeRecordOptions, String query, String page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/branches/diffcheck/{taskId}"
            .replace("{" + "taskId" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (mergeRecordOptions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "mergeRecordOptions", mergeRecordOptions));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDiffCheckValidateBeforeCall(String taskId, List<String> mergeRecordOptions, String query, String page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling getDiffCheck(Async)");
        }

        return getDiffCheckCall(taskId, mergeRecordOptions, query, page, _callback);

    }

    /**
     * getDiffCheck
     * getDiffCheck
     * @param taskId taskId (required)
     * @param mergeRecordOptions mergeRecordOptions (optional)
     * @param query query (optional, default to {})
     * @param page page (optional, default to {})
     * @return List&lt;BranchDiffRecord&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<BranchDiffRecord> getDiffCheck(String taskId, List<String> mergeRecordOptions, String query, String page) throws ApiException {
        ApiResponse<List<BranchDiffRecord>> localVarResp = getDiffCheckWithHttpInfo(taskId, mergeRecordOptions, query, page);
        return localVarResp.getData();
    }

    /**
     * getDiffCheck
     * getDiffCheck
     * @param taskId taskId (required)
     * @param mergeRecordOptions mergeRecordOptions (optional)
     * @param query query (optional, default to {})
     * @param page page (optional, default to {})
     * @return ApiResponse&lt;List&lt;BranchDiffRecord&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<BranchDiffRecord>> getDiffCheckWithHttpInfo(String taskId, List<String> mergeRecordOptions, String query, String page) throws ApiException {
        okhttp3.Call localVarCall = getDiffCheckValidateBeforeCall(taskId, mergeRecordOptions, query, page, null);
        Type localVarReturnType = new TypeToken<List<BranchDiffRecord>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * getDiffCheck (asynchronously)
     * getDiffCheck
     * @param taskId taskId (required)
     * @param mergeRecordOptions mergeRecordOptions (optional)
     * @param query query (optional, default to {})
     * @param page page (optional, default to {})
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDiffCheckAsync(String taskId, List<String> mergeRecordOptions, String query, String page, final ApiCallback<List<BranchDiffRecord>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDiffCheckValidateBeforeCall(taskId, mergeRecordOptions, query, page, _callback);
        Type localVarReturnType = new TypeToken<List<BranchDiffRecord>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for merge
     * @param branchId branchId (required)
     * @param destinationBranchId destinationBranchId (required)
     * @param mergeBranchRequest  (required)
     * @param mergeRecordOptions mergeRecordOptions (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mergeCall(String branchId, String destinationBranchId, MergeBranchRequest mergeBranchRequest, List<String> mergeRecordOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = mergeBranchRequest;

        // create path and map variables
        String localVarPath = "/v1/branches/{branchId}/merge"
            .replace("{" + "branchId" + "}", localVarApiClient.escapeString(branchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (destinationBranchId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("destinationBranchId", destinationBranchId));
        }

        if (mergeRecordOptions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "mergeRecordOptions", mergeRecordOptions));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mergeValidateBeforeCall(String branchId, String destinationBranchId, MergeBranchRequest mergeBranchRequest, List<String> mergeRecordOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'branchId' is set
        if (branchId == null) {
            throw new ApiException("Missing the required parameter 'branchId' when calling merge(Async)");
        }

        // verify the required parameter 'destinationBranchId' is set
        if (destinationBranchId == null) {
            throw new ApiException("Missing the required parameter 'destinationBranchId' when calling merge(Async)");
        }

        // verify the required parameter 'mergeBranchRequest' is set
        if (mergeBranchRequest == null) {
            throw new ApiException("Missing the required parameter 'mergeBranchRequest' when calling merge(Async)");
        }

        return mergeCall(branchId, destinationBranchId, mergeBranchRequest, mergeRecordOptions, _callback);

    }

    /**
     * merge
     * merge
     * @param branchId branchId (required)
     * @param destinationBranchId destinationBranchId (required)
     * @param mergeBranchRequest  (required)
     * @param mergeRecordOptions mergeRecordOptions (optional)
     * @return Task
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public Task merge(String branchId, String destinationBranchId, MergeBranchRequest mergeBranchRequest, List<String> mergeRecordOptions) throws ApiException {
        ApiResponse<Task> localVarResp = mergeWithHttpInfo(branchId, destinationBranchId, mergeBranchRequest, mergeRecordOptions);
        return localVarResp.getData();
    }

    /**
     * merge
     * merge
     * @param branchId branchId (required)
     * @param destinationBranchId destinationBranchId (required)
     * @param mergeBranchRequest  (required)
     * @param mergeRecordOptions mergeRecordOptions (optional)
     * @return ApiResponse&lt;Task&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Task> mergeWithHttpInfo(String branchId, String destinationBranchId, MergeBranchRequest mergeBranchRequest, List<String> mergeRecordOptions) throws ApiException {
        okhttp3.Call localVarCall = mergeValidateBeforeCall(branchId, destinationBranchId, mergeBranchRequest, mergeRecordOptions, null);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * merge (asynchronously)
     * merge
     * @param branchId branchId (required)
     * @param destinationBranchId destinationBranchId (required)
     * @param mergeBranchRequest  (required)
     * @param mergeRecordOptions mergeRecordOptions (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mergeAsync(String branchId, String destinationBranchId, MergeBranchRequest mergeBranchRequest, List<String> mergeRecordOptions, final ApiCallback<Task> _callback) throws ApiException {

        okhttp3.Call localVarCall = mergeValidateBeforeCall(branchId, destinationBranchId, mergeBranchRequest, mergeRecordOptions, _callback);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
