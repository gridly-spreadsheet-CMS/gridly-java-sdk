/*
 * Gridly API
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 5.9.0
 * Contact: support@gridly.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.gridly.api.service;

import com.gridly.api.client.ApiCallback;
import com.gridly.api.client.ApiClient;
import com.gridly.api.client.ApiException;
import com.gridly.api.client.ApiResponse;
import com.gridly.api.client.Configuration;
import com.gridly.api.client.Pair;
import com.gridly.api.client.ProgressRequestBody;
import com.gridly.api.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.gridly.api.model.CreateFileCategory;
import com.gridly.api.model.CreateGrid;
import com.gridly.api.model.FileCategory;
import com.gridly.api.model.Grid;
import com.gridly.api.model.GridSetting;
import com.gridly.api.model.SettingFile;
import com.gridly.api.model.UpdateCategory;
import com.gridly.api.model.UpdateGrid;
import com.gridly.api.model.UpdateGridSetting;
import com.gridly.api.model.UploadSettingFileRequest;
import com.gridly.api.model.UploadedFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class GridApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GridApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GridApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for callList
     * @param dbId dbId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callListCall(String dbId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/grids";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dbId", dbId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call callListValidateBeforeCall(String dbId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbId' is set
        if (dbId == null) {
            throw new ApiException("Missing the required parameter 'dbId' when calling callList(Async)");
        }

        return callListCall(dbId, _callback);

    }

    /**
     * list
     * Get a Grid
     * @param dbId dbId (required)
     * @return List&lt;Grid&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<Grid> callList(String dbId) throws ApiException {
        ApiResponse<List<Grid>> localVarResp = callListWithHttpInfo(dbId);
        return localVarResp.getData();
    }

    /**
     * list
     * Get a Grid
     * @param dbId dbId (required)
     * @return ApiResponse&lt;List&lt;Grid&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Grid>> callListWithHttpInfo(String dbId) throws ApiException {
        okhttp3.Call localVarCall = callListValidateBeforeCall(dbId, null);
        Type localVarReturnType = new TypeToken<List<Grid>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * list (asynchronously)
     * Get a Grid
     * @param dbId dbId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call callListAsync(String dbId, final ApiCallback<List<Grid>> _callback) throws ApiException {

        okhttp3.Call localVarCall = callListValidateBeforeCall(dbId, _callback);
        Type localVarReturnType = new TypeToken<List<Grid>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for create
     * @param dbId dbId (required)
     * @param createGrid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCall(String dbId, CreateGrid createGrid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createGrid;

        // create path and map variables
        String localVarPath = "/v1/grids";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dbId", dbId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createValidateBeforeCall(String dbId, CreateGrid createGrid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbId' is set
        if (dbId == null) {
            throw new ApiException("Missing the required parameter 'dbId' when calling create(Async)");
        }

        // verify the required parameter 'createGrid' is set
        if (createGrid == null) {
            throw new ApiException("Missing the required parameter 'createGrid' when calling create(Async)");
        }

        return createCall(dbId, createGrid, _callback);

    }

    /**
     * create
     * Create a Grid
     * @param dbId dbId (required)
     * @param createGrid  (required)
     * @return Grid
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public Grid create(String dbId, CreateGrid createGrid) throws ApiException {
        ApiResponse<Grid> localVarResp = createWithHttpInfo(dbId, createGrid);
        return localVarResp.getData();
    }

    /**
     * create
     * Create a Grid
     * @param dbId dbId (required)
     * @param createGrid  (required)
     * @return ApiResponse&lt;Grid&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Grid> createWithHttpInfo(String dbId, CreateGrid createGrid) throws ApiException {
        okhttp3.Call localVarCall = createValidateBeforeCall(dbId, createGrid, null);
        Type localVarReturnType = new TypeToken<Grid>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * create (asynchronously)
     * Create a Grid
     * @param dbId dbId (required)
     * @param createGrid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAsync(String dbId, CreateGrid createGrid, final ApiCallback<Grid> _callback) throws ApiException {

        okhttp3.Call localVarCall = createValidateBeforeCall(dbId, createGrid, _callback);
        Type localVarReturnType = new TypeToken<Grid>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createCategory
     * @param gridId gridId (required)
     * @param createFileCategory  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCategoryCall(String gridId, CreateFileCategory createFileCategory, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createFileCategory;

        // create path and map variables
        String localVarPath = "/v1/grids/{gridId}/settings/categories"
            .replace("{" + "gridId" + "}", localVarApiClient.escapeString(gridId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCategoryValidateBeforeCall(String gridId, CreateFileCategory createFileCategory, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gridId' is set
        if (gridId == null) {
            throw new ApiException("Missing the required parameter 'gridId' when calling createCategory(Async)");
        }

        // verify the required parameter 'createFileCategory' is set
        if (createFileCategory == null) {
            throw new ApiException("Missing the required parameter 'createFileCategory' when calling createCategory(Async)");
        }

        return createCategoryCall(gridId, createFileCategory, _callback);

    }

    /**
     * createCategory
     * createCategory
     * @param gridId gridId (required)
     * @param createFileCategory  (required)
     * @return FileCategory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public FileCategory createCategory(String gridId, CreateFileCategory createFileCategory) throws ApiException {
        ApiResponse<FileCategory> localVarResp = createCategoryWithHttpInfo(gridId, createFileCategory);
        return localVarResp.getData();
    }

    /**
     * createCategory
     * createCategory
     * @param gridId gridId (required)
     * @param createFileCategory  (required)
     * @return ApiResponse&lt;FileCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FileCategory> createCategoryWithHttpInfo(String gridId, CreateFileCategory createFileCategory) throws ApiException {
        okhttp3.Call localVarCall = createCategoryValidateBeforeCall(gridId, createFileCategory, null);
        Type localVarReturnType = new TypeToken<FileCategory>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * createCategory (asynchronously)
     * createCategory
     * @param gridId gridId (required)
     * @param createFileCategory  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCategoryAsync(String gridId, CreateFileCategory createFileCategory, final ApiCallback<FileCategory> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCategoryValidateBeforeCall(gridId, createFileCategory, _callback);
        Type localVarReturnType = new TypeToken<FileCategory>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for delete
     * @param gridId gridId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCall(String gridId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/grids/{gridId}"
            .replace("{" + "gridId" + "}", localVarApiClient.escapeString(gridId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteValidateBeforeCall(String gridId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gridId' is set
        if (gridId == null) {
            throw new ApiException("Missing the required parameter 'gridId' when calling delete(Async)");
        }

        return deleteCall(gridId, _callback);

    }

    /**
     * delete
     * Delete a Grid
     * @param gridId gridId (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void delete(String gridId) throws ApiException {
        deleteWithHttpInfo(gridId);
    }

    /**
     * delete
     * Delete a Grid
     * @param gridId gridId (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteWithHttpInfo(String gridId) throws ApiException {
        okhttp3.Call localVarCall = deleteValidateBeforeCall(gridId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * delete (asynchronously)
     * Delete a Grid
     * @param gridId gridId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAsync(String gridId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteValidateBeforeCall(gridId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCategory
     * @param gridId gridId (required)
     * @param categoryId categoryId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCategoryCall(String gridId, String categoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/grids/{gridId}/settings/categories/{categoryId}"
            .replace("{" + "gridId" + "}", localVarApiClient.escapeString(gridId.toString()))
            .replace("{" + "categoryId" + "}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCategoryValidateBeforeCall(String gridId, String categoryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gridId' is set
        if (gridId == null) {
            throw new ApiException("Missing the required parameter 'gridId' when calling deleteCategory(Async)");
        }

        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling deleteCategory(Async)");
        }

        return deleteCategoryCall(gridId, categoryId, _callback);

    }

    /**
     * deleteCategory
     * deleteCategory
     * @param gridId gridId (required)
     * @param categoryId categoryId (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCategory(String gridId, String categoryId) throws ApiException {
        deleteCategoryWithHttpInfo(gridId, categoryId);
    }

    /**
     * deleteCategory
     * deleteCategory
     * @param gridId gridId (required)
     * @param categoryId categoryId (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCategoryWithHttpInfo(String gridId, String categoryId) throws ApiException {
        okhttp3.Call localVarCall = deleteCategoryValidateBeforeCall(gridId, categoryId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * deleteCategory (asynchronously)
     * deleteCategory
     * @param gridId gridId (required)
     * @param categoryId categoryId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCategoryAsync(String gridId, String categoryId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCategoryValidateBeforeCall(gridId, categoryId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteFile
     * @param gridId gridId (required)
     * @param categoryId categoryId (required)
     * @param fileId fileId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFileCall(String gridId, String categoryId, String fileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/grids/{gridId}/settings/categories/{categoryId}/files/{fileId}"
            .replace("{" + "gridId" + "}", localVarApiClient.escapeString(gridId.toString()))
            .replace("{" + "categoryId" + "}", localVarApiClient.escapeString(categoryId.toString()))
            .replace("{" + "fileId" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFileValidateBeforeCall(String gridId, String categoryId, String fileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gridId' is set
        if (gridId == null) {
            throw new ApiException("Missing the required parameter 'gridId' when calling deleteFile(Async)");
        }

        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling deleteFile(Async)");
        }

        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteFile(Async)");
        }

        return deleteFileCall(gridId, categoryId, fileId, _callback);

    }

    /**
     * deleteFile
     * deleteFile
     * @param gridId gridId (required)
     * @param categoryId categoryId (required)
     * @param fileId fileId (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void deleteFile(String gridId, String categoryId, String fileId) throws ApiException {
        deleteFileWithHttpInfo(gridId, categoryId, fileId);
    }

    /**
     * deleteFile
     * deleteFile
     * @param gridId gridId (required)
     * @param categoryId categoryId (required)
     * @param fileId fileId (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteFileWithHttpInfo(String gridId, String categoryId, String fileId) throws ApiException {
        okhttp3.Call localVarCall = deleteFileValidateBeforeCall(gridId, categoryId, fileId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * deleteFile (asynchronously)
     * deleteFile
     * @param gridId gridId (required)
     * @param categoryId categoryId (required)
     * @param fileId fileId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFileAsync(String gridId, String categoryId, String fileId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFileValidateBeforeCall(gridId, categoryId, fileId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for get
     * @param gridId gridId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCall(String gridId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/grids/{gridId}"
            .replace("{" + "gridId" + "}", localVarApiClient.escapeString(gridId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getValidateBeforeCall(String gridId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gridId' is set
        if (gridId == null) {
            throw new ApiException("Missing the required parameter 'gridId' when calling get(Async)");
        }

        return getCall(gridId, _callback);

    }

    /**
     * get
     * Get a Grid
     * @param gridId gridId (required)
     * @return Grid
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Grid get(String gridId) throws ApiException {
        ApiResponse<Grid> localVarResp = getWithHttpInfo(gridId);
        return localVarResp.getData();
    }

    /**
     * get
     * Get a Grid
     * @param gridId gridId (required)
     * @return ApiResponse&lt;Grid&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Grid> getWithHttpInfo(String gridId) throws ApiException {
        okhttp3.Call localVarCall = getValidateBeforeCall(gridId, null);
        Type localVarReturnType = new TypeToken<Grid>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get (asynchronously)
     * Get a Grid
     * @param gridId gridId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAsync(String gridId, final ApiCallback<Grid> _callback) throws ApiException {

        okhttp3.Call localVarCall = getValidateBeforeCall(gridId, _callback);
        Type localVarReturnType = new TypeToken<Grid>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSetting
     * @param gridId gridId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSettingCall(String gridId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/grids/{gridId}/settings"
            .replace("{" + "gridId" + "}", localVarApiClient.escapeString(gridId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSettingValidateBeforeCall(String gridId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gridId' is set
        if (gridId == null) {
            throw new ApiException("Missing the required parameter 'gridId' when calling getSetting(Async)");
        }

        return getSettingCall(gridId, _callback);

    }

    /**
     * getSetting
     * getSetting
     * @param gridId gridId (required)
     * @return GridSetting
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GridSetting getSetting(String gridId) throws ApiException {
        ApiResponse<GridSetting> localVarResp = getSettingWithHttpInfo(gridId);
        return localVarResp.getData();
    }

    /**
     * getSetting
     * getSetting
     * @param gridId gridId (required)
     * @return ApiResponse&lt;GridSetting&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GridSetting> getSettingWithHttpInfo(String gridId) throws ApiException {
        okhttp3.Call localVarCall = getSettingValidateBeforeCall(gridId, null);
        Type localVarReturnType = new TypeToken<GridSetting>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * getSetting (asynchronously)
     * getSetting
     * @param gridId gridId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSettingAsync(String gridId, final ApiCallback<GridSetting> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSettingValidateBeforeCall(gridId, _callback);
        Type localVarReturnType = new TypeToken<GridSetting>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listFiles
     * @param gridId gridId (required)
     * @param categoryId categoryId (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listFilesCall(String gridId, List<String> categoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/grids/{gridId}/settings/files"
            .replace("{" + "gridId" + "}", localVarApiClient.escapeString(gridId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (categoryId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "categoryId", categoryId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFilesValidateBeforeCall(String gridId, List<String> categoryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gridId' is set
        if (gridId == null) {
            throw new ApiException("Missing the required parameter 'gridId' when calling listFiles(Async)");
        }

        return listFilesCall(gridId, categoryId, _callback);

    }

    /**
     * listFiles
     * listFiles
     * @param gridId gridId (required)
     * @param categoryId categoryId (optional)
     * @return List&lt;SettingFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<SettingFile> listFiles(String gridId, List<String> categoryId) throws ApiException {
        ApiResponse<List<SettingFile>> localVarResp = listFilesWithHttpInfo(gridId, categoryId);
        return localVarResp.getData();
    }

    /**
     * listFiles
     * listFiles
     * @param gridId gridId (required)
     * @param categoryId categoryId (optional)
     * @return ApiResponse&lt;List&lt;SettingFile&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SettingFile>> listFilesWithHttpInfo(String gridId, List<String> categoryId) throws ApiException {
        okhttp3.Call localVarCall = listFilesValidateBeforeCall(gridId, categoryId, null);
        Type localVarReturnType = new TypeToken<List<SettingFile>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * listFiles (asynchronously)
     * listFiles
     * @param gridId gridId (required)
     * @param categoryId categoryId (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listFilesAsync(String gridId, List<String> categoryId, final ApiCallback<List<SettingFile>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listFilesValidateBeforeCall(gridId, categoryId, _callback);
        Type localVarReturnType = new TypeToken<List<SettingFile>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTemplateGrids
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTemplateGridsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/template-grids";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTemplateGridsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listTemplateGridsCall(_callback);

    }

    /**
     * listTemplateGrids
     * listTemplateGrids
     * @return List&lt;Grid&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<Grid> listTemplateGrids() throws ApiException {
        ApiResponse<List<Grid>> localVarResp = listTemplateGridsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * listTemplateGrids
     * listTemplateGrids
     * @return ApiResponse&lt;List&lt;Grid&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Grid>> listTemplateGridsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listTemplateGridsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Grid>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * listTemplateGrids (asynchronously)
     * listTemplateGrids
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTemplateGridsAsync(final ApiCallback<List<Grid>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTemplateGridsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Grid>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for update
     * @param gridId gridId (required)
     * @param updateGrid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCall(String gridId, UpdateGrid updateGrid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateGrid;

        // create path and map variables
        String localVarPath = "/v1/grids/{gridId}"
            .replace("{" + "gridId" + "}", localVarApiClient.escapeString(gridId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateValidateBeforeCall(String gridId, UpdateGrid updateGrid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gridId' is set
        if (gridId == null) {
            throw new ApiException("Missing the required parameter 'gridId' when calling update(Async)");
        }

        // verify the required parameter 'updateGrid' is set
        if (updateGrid == null) {
            throw new ApiException("Missing the required parameter 'updateGrid' when calling update(Async)");
        }

        return updateCall(gridId, updateGrid, _callback);

    }

    /**
     * update
     * Update a Grid
     * @param gridId gridId (required)
     * @param updateGrid  (required)
     * @return Grid
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Grid update(String gridId, UpdateGrid updateGrid) throws ApiException {
        ApiResponse<Grid> localVarResp = updateWithHttpInfo(gridId, updateGrid);
        return localVarResp.getData();
    }

    /**
     * update
     * Update a Grid
     * @param gridId gridId (required)
     * @param updateGrid  (required)
     * @return ApiResponse&lt;Grid&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Grid> updateWithHttpInfo(String gridId, UpdateGrid updateGrid) throws ApiException {
        okhttp3.Call localVarCall = updateValidateBeforeCall(gridId, updateGrid, null);
        Type localVarReturnType = new TypeToken<Grid>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * update (asynchronously)
     * Update a Grid
     * @param gridId gridId (required)
     * @param updateGrid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAsync(String gridId, UpdateGrid updateGrid, final ApiCallback<Grid> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateValidateBeforeCall(gridId, updateGrid, _callback);
        Type localVarReturnType = new TypeToken<Grid>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCategory
     * @param gridId gridId (required)
     * @param categoryId categoryId (required)
     * @param updateCategory  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCategoryCall(String gridId, String categoryId, UpdateCategory updateCategory, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateCategory;

        // create path and map variables
        String localVarPath = "/v1/grids/{gridId}/settings/categories/{categoryId}"
            .replace("{" + "gridId" + "}", localVarApiClient.escapeString(gridId.toString()))
            .replace("{" + "categoryId" + "}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCategoryValidateBeforeCall(String gridId, String categoryId, UpdateCategory updateCategory, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gridId' is set
        if (gridId == null) {
            throw new ApiException("Missing the required parameter 'gridId' when calling updateCategory(Async)");
        }

        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling updateCategory(Async)");
        }

        // verify the required parameter 'updateCategory' is set
        if (updateCategory == null) {
            throw new ApiException("Missing the required parameter 'updateCategory' when calling updateCategory(Async)");
        }

        return updateCategoryCall(gridId, categoryId, updateCategory, _callback);

    }

    /**
     * updateCategory
     * updateCategory
     * @param gridId gridId (required)
     * @param categoryId categoryId (required)
     * @param updateCategory  (required)
     * @return FileCategory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public FileCategory updateCategory(String gridId, String categoryId, UpdateCategory updateCategory) throws ApiException {
        ApiResponse<FileCategory> localVarResp = updateCategoryWithHttpInfo(gridId, categoryId, updateCategory);
        return localVarResp.getData();
    }

    /**
     * updateCategory
     * updateCategory
     * @param gridId gridId (required)
     * @param categoryId categoryId (required)
     * @param updateCategory  (required)
     * @return ApiResponse&lt;FileCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FileCategory> updateCategoryWithHttpInfo(String gridId, String categoryId, UpdateCategory updateCategory) throws ApiException {
        okhttp3.Call localVarCall = updateCategoryValidateBeforeCall(gridId, categoryId, updateCategory, null);
        Type localVarReturnType = new TypeToken<FileCategory>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * updateCategory (asynchronously)
     * updateCategory
     * @param gridId gridId (required)
     * @param categoryId categoryId (required)
     * @param updateCategory  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCategoryAsync(String gridId, String categoryId, UpdateCategory updateCategory, final ApiCallback<FileCategory> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCategoryValidateBeforeCall(gridId, categoryId, updateCategory, _callback);
        Type localVarReturnType = new TypeToken<FileCategory>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSetting
     * @param gridId gridId (required)
     * @param updateGridSetting  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSettingCall(String gridId, UpdateGridSetting updateGridSetting, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateGridSetting;

        // create path and map variables
        String localVarPath = "/v1/grids/{gridId}/settings"
            .replace("{" + "gridId" + "}", localVarApiClient.escapeString(gridId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSettingValidateBeforeCall(String gridId, UpdateGridSetting updateGridSetting, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gridId' is set
        if (gridId == null) {
            throw new ApiException("Missing the required parameter 'gridId' when calling updateSetting(Async)");
        }

        // verify the required parameter 'updateGridSetting' is set
        if (updateGridSetting == null) {
            throw new ApiException("Missing the required parameter 'updateGridSetting' when calling updateSetting(Async)");
        }

        return updateSettingCall(gridId, updateGridSetting, _callback);

    }

    /**
     * updateSetting
     * updateSetting
     * @param gridId gridId (required)
     * @param updateGridSetting  (required)
     * @return GridSetting
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GridSetting updateSetting(String gridId, UpdateGridSetting updateGridSetting) throws ApiException {
        ApiResponse<GridSetting> localVarResp = updateSettingWithHttpInfo(gridId, updateGridSetting);
        return localVarResp.getData();
    }

    /**
     * updateSetting
     * updateSetting
     * @param gridId gridId (required)
     * @param updateGridSetting  (required)
     * @return ApiResponse&lt;GridSetting&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GridSetting> updateSettingWithHttpInfo(String gridId, UpdateGridSetting updateGridSetting) throws ApiException {
        okhttp3.Call localVarCall = updateSettingValidateBeforeCall(gridId, updateGridSetting, null);
        Type localVarReturnType = new TypeToken<GridSetting>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * updateSetting (asynchronously)
     * updateSetting
     * @param gridId gridId (required)
     * @param updateGridSetting  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSettingAsync(String gridId, UpdateGridSetting updateGridSetting, final ApiCallback<GridSetting> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSettingValidateBeforeCall(gridId, updateGridSetting, _callback);
        Type localVarReturnType = new TypeToken<GridSetting>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadSettingFile
     * @param gridId gridId (required)
     * @param categoryId categoryId (required)
     * @param uploadSettingFileRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadSettingFileCall(String gridId, String categoryId, UploadSettingFileRequest uploadSettingFileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = uploadSettingFileRequest;

        // create path and map variables
        String localVarPath = "/v1/grids/{gridId}/settings/categories/{categoryId}/files"
            .replace("{" + "gridId" + "}", localVarApiClient.escapeString(gridId.toString()))
            .replace("{" + "categoryId" + "}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadSettingFileValidateBeforeCall(String gridId, String categoryId, UploadSettingFileRequest uploadSettingFileRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gridId' is set
        if (gridId == null) {
            throw new ApiException("Missing the required parameter 'gridId' when calling uploadSettingFile(Async)");
        }

        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling uploadSettingFile(Async)");
        }

        // verify the required parameter 'uploadSettingFileRequest' is set
        if (uploadSettingFileRequest == null) {
            throw new ApiException("Missing the required parameter 'uploadSettingFileRequest' when calling uploadSettingFile(Async)");
        }

        return uploadSettingFileCall(gridId, categoryId, uploadSettingFileRequest, _callback);

    }

    /**
     * uploadSettingFile
     * uploadSettingFile
     * @param gridId gridId (required)
     * @param categoryId categoryId (required)
     * @param uploadSettingFileRequest  (required)
     * @return UploadedFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public UploadedFile uploadSettingFile(String gridId, String categoryId, UploadSettingFileRequest uploadSettingFileRequest) throws ApiException {
        ApiResponse<UploadedFile> localVarResp = uploadSettingFileWithHttpInfo(gridId, categoryId, uploadSettingFileRequest);
        return localVarResp.getData();
    }

    /**
     * uploadSettingFile
     * uploadSettingFile
     * @param gridId gridId (required)
     * @param categoryId categoryId (required)
     * @param uploadSettingFileRequest  (required)
     * @return ApiResponse&lt;UploadedFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UploadedFile> uploadSettingFileWithHttpInfo(String gridId, String categoryId, UploadSettingFileRequest uploadSettingFileRequest) throws ApiException {
        okhttp3.Call localVarCall = uploadSettingFileValidateBeforeCall(gridId, categoryId, uploadSettingFileRequest, null);
        Type localVarReturnType = new TypeToken<UploadedFile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * uploadSettingFile (asynchronously)
     * uploadSettingFile
     * @param gridId gridId (required)
     * @param categoryId categoryId (required)
     * @param uploadSettingFileRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadSettingFileAsync(String gridId, String categoryId, UploadSettingFileRequest uploadSettingFileRequest, final ApiCallback<UploadedFile> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadSettingFileValidateBeforeCall(gridId, categoryId, uploadSettingFileRequest, _callback);
        Type localVarReturnType = new TypeToken<UploadedFile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
