/*
 * Gridly API
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 5.9.0
 * Contact: support@gridly.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.gridly.api.service;

import com.gridly.api.client.ApiCallback;
import com.gridly.api.client.ApiClient;
import com.gridly.api.client.ApiException;
import com.gridly.api.client.ApiResponse;
import com.gridly.api.client.Configuration;
import com.gridly.api.client.Pair;
import com.gridly.api.client.ProgressRequestBody;
import com.gridly.api.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.gridly.api.model.DeleteRecord;
import com.gridly.api.model.FetchFileOption;
import com.gridly.api.model.FetchRecordHistoryRequest;
import com.gridly.api.model.Record;
import com.gridly.api.model.RecordHistory;
import com.gridly.api.model.SetRecord;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class RecordApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RecordApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RecordApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for create
     * @param viewId viewId (required)
     * @param createRecords createRecords (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCall(String viewId, List<SetRecord> createRecords, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createRecords;

        // create path and map variables
        String localVarPath = "/v1/views/{viewId}/records"
            .replace("{" + "viewId" + "}", localVarApiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createValidateBeforeCall(String viewId, List<SetRecord> createRecords, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling create(Async)");
        }

        // verify the required parameter 'createRecords' is set
        if (createRecords == null) {
            throw new ApiException("Missing the required parameter 'createRecords' when calling create(Async)");
        }

        return createCall(viewId, createRecords, _callback);

    }

    /**
     * create
     * create
     * @param viewId viewId (required)
     * @param createRecords createRecords (required)
     * @return List&lt;Record&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<Record> create(String viewId, List<SetRecord> createRecords) throws ApiException {
        ApiResponse<List<Record>> localVarResp = createWithHttpInfo(viewId, createRecords);
        return localVarResp.getData();
    }

    /**
     * create
     * create
     * @param viewId viewId (required)
     * @param createRecords createRecords (required)
     * @return ApiResponse&lt;List&lt;Record&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Record>> createWithHttpInfo(String viewId, List<SetRecord> createRecords) throws ApiException {
        okhttp3.Call localVarCall = createValidateBeforeCall(viewId, createRecords, null);
        Type localVarReturnType = new TypeToken<List<Record>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * create (asynchronously)
     * create
     * @param viewId viewId (required)
     * @param createRecords createRecords (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAsync(String viewId, List<SetRecord> createRecords, final ApiCallback<List<Record>> _callback) throws ApiException {

        okhttp3.Call localVarCall = createValidateBeforeCall(viewId, createRecords, _callback);
        Type localVarReturnType = new TypeToken<List<Record>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for delete
     * @param viewId viewId (required)
     * @param deleteRecord  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCall(String viewId, DeleteRecord deleteRecord, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteRecord;

        // create path and map variables
        String localVarPath = "/v1/views/{viewId}/records"
            .replace("{" + "viewId" + "}", localVarApiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteValidateBeforeCall(String viewId, DeleteRecord deleteRecord, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling delete(Async)");
        }

        // verify the required parameter 'deleteRecord' is set
        if (deleteRecord == null) {
            throw new ApiException("Missing the required parameter 'deleteRecord' when calling delete(Async)");
        }

        return deleteCall(viewId, deleteRecord, _callback);

    }

    /**
     * delete
     * delete
     * @param viewId viewId (required)
     * @param deleteRecord  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void delete(String viewId, DeleteRecord deleteRecord) throws ApiException {
        deleteWithHttpInfo(viewId, deleteRecord);
    }

    /**
     * delete
     * delete
     * @param viewId viewId (required)
     * @param deleteRecord  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteWithHttpInfo(String viewId, DeleteRecord deleteRecord) throws ApiException {
        okhttp3.Call localVarCall = deleteValidateBeforeCall(viewId, deleteRecord, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * delete (asynchronously)
     * delete
     * @param viewId viewId (required)
     * @param deleteRecord  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAsync(String viewId, DeleteRecord deleteRecord, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteValidateBeforeCall(viewId, deleteRecord, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetch
     * @param viewId viewId (required)
     * @param columnIds columnIds (optional)
     * @param page page (optional, default to {})
     * @param query query (optional, default to {})
     * @param sort sort (optional, default to {})
     * @param fetchFileOption fetchFileOption (optional)
     * @param afterRecordId afterRecordId (optional)
     * @param beforeRecordId beforeRecordId (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchCall(String viewId, List<String> columnIds, String page, String query, String sort, FetchFileOption fetchFileOption, String afterRecordId, String beforeRecordId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/views/{viewId}/records"
            .replace("{" + "viewId" + "}", localVarApiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (columnIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "columnIds", columnIds));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (fetchFileOption != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetchFileOption", fetchFileOption));
        }

        if (afterRecordId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("afterRecordId", afterRecordId));
        }

        if (beforeRecordId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("beforeRecordId", beforeRecordId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchValidateBeforeCall(String viewId, List<String> columnIds, String page, String query, String sort, FetchFileOption fetchFileOption, String afterRecordId, String beforeRecordId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling fetch(Async)");
        }

        return fetchCall(viewId, columnIds, page, query, sort, fetchFileOption, afterRecordId, beforeRecordId, _callback);

    }

    /**
     * fetch
     * fetch
     * @param viewId viewId (required)
     * @param columnIds columnIds (optional)
     * @param page page (optional, default to {})
     * @param query query (optional, default to {})
     * @param sort sort (optional, default to {})
     * @param fetchFileOption fetchFileOption (optional)
     * @param afterRecordId afterRecordId (optional)
     * @param beforeRecordId beforeRecordId (optional)
     * @return List&lt;Record&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<Record> fetch(String viewId, List<String> columnIds, String page, String query, String sort, FetchFileOption fetchFileOption, String afterRecordId, String beforeRecordId) throws ApiException {
        ApiResponse<List<Record>> localVarResp = fetchWithHttpInfo(viewId, columnIds, page, query, sort, fetchFileOption, afterRecordId, beforeRecordId);
        return localVarResp.getData();
    }

    /**
     * fetch
     * fetch
     * @param viewId viewId (required)
     * @param columnIds columnIds (optional)
     * @param page page (optional, default to {})
     * @param query query (optional, default to {})
     * @param sort sort (optional, default to {})
     * @param fetchFileOption fetchFileOption (optional)
     * @param afterRecordId afterRecordId (optional)
     * @param beforeRecordId beforeRecordId (optional)
     * @return ApiResponse&lt;List&lt;Record&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Record>> fetchWithHttpInfo(String viewId, List<String> columnIds, String page, String query, String sort, FetchFileOption fetchFileOption, String afterRecordId, String beforeRecordId) throws ApiException {
        okhttp3.Call localVarCall = fetchValidateBeforeCall(viewId, columnIds, page, query, sort, fetchFileOption, afterRecordId, beforeRecordId, null);
        Type localVarReturnType = new TypeToken<List<Record>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * fetch (asynchronously)
     * fetch
     * @param viewId viewId (required)
     * @param columnIds columnIds (optional)
     * @param page page (optional, default to {})
     * @param query query (optional, default to {})
     * @param sort sort (optional, default to {})
     * @param fetchFileOption fetchFileOption (optional)
     * @param afterRecordId afterRecordId (optional)
     * @param beforeRecordId beforeRecordId (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchAsync(String viewId, List<String> columnIds, String page, String query, String sort, FetchFileOption fetchFileOption, String afterRecordId, String beforeRecordId, final ApiCallback<List<Record>> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchValidateBeforeCall(viewId, columnIds, page, query, sort, fetchFileOption, afterRecordId, beforeRecordId, _callback);
        Type localVarReturnType = new TypeToken<List<Record>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchHistories
     * @param viewId viewId (required)
     * @param recordId recordId (required)
     * @param fetchRequest fetchRequest (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchHistoriesCall(String viewId, String recordId, FetchRecordHistoryRequest fetchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/views/{viewId}/records/{recordId}/histories"
            .replace("{" + "viewId" + "}", localVarApiClient.escapeString(viewId.toString()))
            .replace("{" + "recordId" + "}", localVarApiClient.escapeString(recordId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fetchRequest != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetchRequest", fetchRequest));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchHistoriesValidateBeforeCall(String viewId, String recordId, FetchRecordHistoryRequest fetchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling fetchHistories(Async)");
        }

        // verify the required parameter 'recordId' is set
        if (recordId == null) {
            throw new ApiException("Missing the required parameter 'recordId' when calling fetchHistories(Async)");
        }

        // verify the required parameter 'fetchRequest' is set
        if (fetchRequest == null) {
            throw new ApiException("Missing the required parameter 'fetchRequest' when calling fetchHistories(Async)");
        }

        return fetchHistoriesCall(viewId, recordId, fetchRequest, _callback);

    }

    /**
     * fetchHistories
     * fetchHistories
     * @param viewId viewId (required)
     * @param recordId recordId (required)
     * @param fetchRequest fetchRequest (required)
     * @return List&lt;RecordHistory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<RecordHistory> fetchHistories(String viewId, String recordId, FetchRecordHistoryRequest fetchRequest) throws ApiException {
        ApiResponse<List<RecordHistory>> localVarResp = fetchHistoriesWithHttpInfo(viewId, recordId, fetchRequest);
        return localVarResp.getData();
    }

    /**
     * fetchHistories
     * fetchHistories
     * @param viewId viewId (required)
     * @param recordId recordId (required)
     * @param fetchRequest fetchRequest (required)
     * @return ApiResponse&lt;List&lt;RecordHistory&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RecordHistory>> fetchHistoriesWithHttpInfo(String viewId, String recordId, FetchRecordHistoryRequest fetchRequest) throws ApiException {
        okhttp3.Call localVarCall = fetchHistoriesValidateBeforeCall(viewId, recordId, fetchRequest, null);
        Type localVarReturnType = new TypeToken<List<RecordHistory>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * fetchHistories (asynchronously)
     * fetchHistories
     * @param viewId viewId (required)
     * @param recordId recordId (required)
     * @param fetchRequest fetchRequest (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchHistoriesAsync(String viewId, String recordId, FetchRecordHistoryRequest fetchRequest, final ApiCallback<List<RecordHistory>> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchHistoriesValidateBeforeCall(viewId, recordId, fetchRequest, _callback);
        Type localVarReturnType = new TypeToken<List<RecordHistory>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for update
     * @param viewId viewId (required)
     * @param setRecord  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCall(String viewId, List<SetRecord> setRecord, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setRecord;

        // create path and map variables
        String localVarPath = "/v1/views/{viewId}/records"
            .replace("{" + "viewId" + "}", localVarApiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateValidateBeforeCall(String viewId, List<SetRecord> setRecord, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling update(Async)");
        }

        // verify the required parameter 'setRecord' is set
        if (setRecord == null) {
            throw new ApiException("Missing the required parameter 'setRecord' when calling update(Async)");
        }

        return updateCall(viewId, setRecord, _callback);

    }

    /**
     * update
     * update
     * @param viewId viewId (required)
     * @param setRecord  (required)
     * @return List&lt;Record&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<Record> update(String viewId, List<SetRecord> setRecord) throws ApiException {
        ApiResponse<List<Record>> localVarResp = updateWithHttpInfo(viewId, setRecord);
        return localVarResp.getData();
    }

    /**
     * update
     * update
     * @param viewId viewId (required)
     * @param setRecord  (required)
     * @return ApiResponse&lt;List&lt;Record&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Record>> updateWithHttpInfo(String viewId, List<SetRecord> setRecord) throws ApiException {
        okhttp3.Call localVarCall = updateValidateBeforeCall(viewId, setRecord, null);
        Type localVarReturnType = new TypeToken<List<Record>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * update (asynchronously)
     * update
     * @param viewId viewId (required)
     * @param setRecord  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAsync(String viewId, List<SetRecord> setRecord, final ApiCallback<List<Record>> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateValidateBeforeCall(viewId, setRecord, _callback);
        Type localVarReturnType = new TypeToken<List<Record>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRecord
     * @param id id (required)
     * @param viewId viewId (required)
     * @param setRecord  (required)
     * @param path path (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRecordCall(String id, String viewId, SetRecord setRecord, String path, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setRecord;

        // create path and map variables
        String localVarPath = "/v1/views/{viewId}/records/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "viewId" + "}", localVarApiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (path != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("path", path));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRecordValidateBeforeCall(String id, String viewId, SetRecord setRecord, String path, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateRecord(Async)");
        }

        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling updateRecord(Async)");
        }

        // verify the required parameter 'setRecord' is set
        if (setRecord == null) {
            throw new ApiException("Missing the required parameter 'setRecord' when calling updateRecord(Async)");
        }

        return updateRecordCall(id, viewId, setRecord, path, _callback);

    }

    /**
     * updateRecord
     * updateRecord
     * @param id id (required)
     * @param viewId viewId (required)
     * @param setRecord  (required)
     * @param path path (optional)
     * @return Record
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Record updateRecord(String id, String viewId, SetRecord setRecord, String path) throws ApiException {
        ApiResponse<Record> localVarResp = updateRecordWithHttpInfo(id, viewId, setRecord, path);
        return localVarResp.getData();
    }

    /**
     * updateRecord
     * updateRecord
     * @param id id (required)
     * @param viewId viewId (required)
     * @param setRecord  (required)
     * @param path path (optional)
     * @return ApiResponse&lt;Record&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Record> updateRecordWithHttpInfo(String id, String viewId, SetRecord setRecord, String path) throws ApiException {
        okhttp3.Call localVarCall = updateRecordValidateBeforeCall(id, viewId, setRecord, path, null);
        Type localVarReturnType = new TypeToken<Record>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * updateRecord (asynchronously)
     * updateRecord
     * @param id id (required)
     * @param viewId viewId (required)
     * @param setRecord  (required)
     * @param path path (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRecordAsync(String id, String viewId, SetRecord setRecord, String path, final ApiCallback<Record> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRecordValidateBeforeCall(id, viewId, setRecord, path, _callback);
        Type localVarReturnType = new TypeToken<Record>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
