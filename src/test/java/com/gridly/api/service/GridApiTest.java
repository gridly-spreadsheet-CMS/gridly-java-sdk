/*
 * Gridly API
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 4.33.0
 * Contact: support@gridly.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.gridly.api.service;

import com.gridly.api.client.ApiException;
import com.gridly.api.model.CreateFileCategory;
import com.gridly.api.model.CreateGrid;
import com.gridly.api.model.FileCategory;
import com.gridly.api.model.Grid;
import com.gridly.api.model.GridSetting;
import com.gridly.api.model.SettingFile;
import com.gridly.api.model.UpdateCategory;
import com.gridly.api.model.UpdateGrid;
import com.gridly.api.model.UpdateGridSetting;
import com.gridly.api.model.UploadSettingFileRequest;
import com.gridly.api.model.UploadedFile;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for GridApi
 */
@Disabled
public class GridApiTest {

    private final GridApi api = new GridApi();

    /**
     * list
     *
     * Get a Grid
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void callListTest() throws ApiException {
        String dbId = null;
        List<Grid> response = api.callList(dbId);
        // TODO: test validations
    }

    /**
     * create
     *
     * Create a Grid
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTest() throws ApiException {
        String dbId = null;
        CreateGrid createGrid = null;
        Grid response = api.create(dbId, createGrid);
        // TODO: test validations
    }

    /**
     * createCategory
     *
     * createCategory
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCategoryTest() throws ApiException {
        String gridId = null;
        CreateFileCategory createFileCategory = null;
        FileCategory response = api.createCategory(gridId, createFileCategory);
        // TODO: test validations
    }

    /**
     * delete
     *
     * Delete a Grid
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTest() throws ApiException {
        String gridId = null;
        api.delete(gridId);
        // TODO: test validations
    }

    /**
     * deleteCategory
     *
     * deleteCategory
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCategoryTest() throws ApiException {
        String gridId = null;
        String categoryId = null;
        api.deleteCategory(gridId, categoryId);
        // TODO: test validations
    }

    /**
     * deleteFile
     *
     * deleteFile
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFileTest() throws ApiException {
        String gridId = null;
        String categoryId = null;
        String fileId = null;
        api.deleteFile(gridId, categoryId, fileId);
        // TODO: test validations
    }

    /**
     * get
     *
     * Get a Grid
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTest() throws ApiException {
        String gridId = null;
        Grid response = api.get(gridId);
        // TODO: test validations
    }

    /**
     * getSetting
     *
     * getSetting
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSettingTest() throws ApiException {
        String gridId = null;
        GridSetting response = api.getSetting(gridId);
        // TODO: test validations
    }

    /**
     * listFiles
     *
     * listFiles
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFilesTest() throws ApiException {
        String gridId = null;
        List<String> categoryId = null;
        List<SettingFile> response = api.listFiles(gridId, categoryId);
        // TODO: test validations
    }

    /**
     * listTemplateGrids
     *
     * listTemplateGrids
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTemplateGridsTest() throws ApiException {
        List<Grid> response = api.listTemplateGrids();
        // TODO: test validations
    }

    /**
     * update
     *
     * Update a Grid
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTest() throws ApiException {
        String gridId = null;
        UpdateGrid updateGrid = null;
        Grid response = api.update(gridId, updateGrid);
        // TODO: test validations
    }

    /**
     * updateCategory
     *
     * updateCategory
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCategoryTest() throws ApiException {
        String gridId = null;
        String categoryId = null;
        UpdateCategory updateCategory = null;
        FileCategory response = api.updateCategory(gridId, categoryId, updateCategory);
        // TODO: test validations
    }

    /**
     * updateSetting
     *
     * updateSetting
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSettingTest() throws ApiException {
        String gridId = null;
        UpdateGridSetting updateGridSetting = null;
        GridSetting response = api.updateSetting(gridId, updateGridSetting);
        // TODO: test validations
    }

    /**
     * uploadSettingFile
     *
     * uploadSettingFile
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadSettingFileTest() throws ApiException {
        String gridId = null;
        String categoryId = null;
        UploadSettingFileRequest uploadSettingFileRequest = null;
        UploadedFile response = api.uploadSettingFile(gridId, categoryId, uploadSettingFileRequest);
        // TODO: test validations
    }

}
